<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题之js(九)</title>
      <link href="/2024/09/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%8D%81)/"/>
      <url>/2024/09/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%8D%81)/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-中内存泄漏的几种情况"><a href="#JavaScript-中内存泄漏的几种情况" class="headerlink" title="JavaScript 中内存泄漏的几种情况"></a>JavaScript 中内存泄漏的几种情况</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</p><p>并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费</p><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存</p><p>对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃</p><p>在<code>C</code>语言中，因为是手动管理内存，内存泄露是经常出现的事情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char * buffer;</span><br><span class="line">buffer = (char*) malloc(42);</span><br><span class="line"></span><br><span class="line">// Do something with buffer</span><br><span class="line"></span><br><span class="line">free(buffer);</span><br></pre></td></tr></table></figure><p>上面是 C 语言代码，<code>malloc</code>方法用来申请内存，使用完毕之后，必须自己用<code>free</code>方法释放内存。</p><p>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”</p><h2 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h2><p>Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存</p><p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</p><p>通常情况下有两种实现方式：</p><ul><li>标记清除</li><li>引用计数</li></ul><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p><code>JavaScript</code>最常用的垃圾收回机制</p><p>当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“</p><p>垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉</p><p>在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了</p><p>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">0</span>,</span><br><span class="line">  n = <span class="number">19</span>; <span class="comment">// 把 m,n,add() 标记为进入环境。</span></span><br><span class="line"><span class="title function_">add</span>(m, n); <span class="comment">// 把 a, b, c标记为进入环境。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// a,b,c标记为离开环境，等待垃圾回收。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">var</span> c = a + b;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是<code>0</code>，就表示这个值不再用到了，因此可以将这块内存释放</p><p>如果一个值不再需要了，引用数却不为<code>0</code>，垃圾回收机制无法释放这块内存，从而导致内存泄漏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，数组<code>[1, 2, 3, 4]</code>是一个值，会占用内存。变量<code>arr</code>是仅有的对这个值的引用，因此引用次数为<code>1</code>。尽管后面的代码没有用到<code>arr</code>，它还是会持续占用内存</p><p>如果需要这块内存被垃圾回收机制释放，只需要设置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>通过设置<code>arr</code>为<code>null</code>，就解除了对数组<code>[1,2,3,4]</code>的引用，引用次数变为 0，就被垃圾回收了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用</p><h2 id="三、常见内存泄露情况"><a href="#三、常见内存泄露情况" class="headerlink" title="三、常见内存泄露情况"></a>三、常见内存泄露情况</h2><p>意外的全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种意外的全局变量可能由 <code>this</code> 创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">variable</span> = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo 调用自己，this 指向了全局对象（window）</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>上述使用严格模式，可以避免意外的全局变量</p><p>定时器也常会造成内存泄露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = <span class="title function_">getData</span>();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Node&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="comment">// 处理 node 和 someResource</span></span><br><span class="line">        node.<span class="property">innerHTML</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(someResource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>如果<code>id</code>为 Node 的元素从<code>DOM</code>中移除，该定时器仍会存在，同时，因为回调函数中包含对<code>someResource</code>的引用，定时器外面的<code>someResource</code>也不会被释放</p><p>包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> unused = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, <span class="string">&quot;闭包内引用obj obj不会被释放&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  obj = <span class="literal">null</span>; <span class="comment">// 解决方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有清理对<code>DOM</code>元素的引用同样造成内存泄露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refA = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;refA&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(refA); <span class="comment">// dom删除了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(refA, <span class="string">&quot;refA&quot;</span>); <span class="comment">// 但是还存在引用能console出整个div 没有被回收</span></span><br><span class="line">refA = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(refA, <span class="string">&quot;refA&quot;</span>); <span class="comment">// 解除引用</span></span><br></pre></td></tr></table></figure><p>包括使用事件监听<code>addEventListener</code>监听的时候，在不监听的情况下使用<code>removeEventListener</code>取消对事件监听</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li><li><a href="https://zh.wikipedia.org/wiki">https://zh.wikipedia.org/wiki</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(九)</title>
      <link href="/2024/09/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B9%9D)/"/>
      <url>/2024/09/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B9%9D)/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>本质上是优化高频率执行代码的一种手段</p><p>如：浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能</p><p>为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用 <strong>防抖（debounce）</strong> 和 <strong>节流（throttle）</strong> 的方式来减少调用频率</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li><li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li></ul><p>一个经典的比喻:</p><p>想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应</p><p>假设电梯有两种运行策略 <code>debounce</code> 和 <code>throttle</code>，超时设定为 15 秒，不考虑容量限制</p><p>电梯第一个人进来后，15 秒后准时运送一次，这是节流</p><p>电梯第一个人进来后，等待 15 秒。如果过程中又有人进来，15 秒等待重新计时，直到 15 秒后开始运送，这是防抖</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>完成节流可以使用时间戳与定时器的写法</p><p>使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled1</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> oldtime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newtime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">      oldtime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用定时器写法，<code>delay</code>毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> starttime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">let</span> remaining = delay - (curTime - starttime); <span class="comment">// 从上一次到现在，还剩下多少多余时间</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      starttime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(fn, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>简单版本的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// timeout 不为null</span></span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout; <span class="comment">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>相同点：</p><ul><li>都可以通过使用 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率。节省计算资源</li></ul><p>不同点：</p><ul><li>函数防抖，在一段连续操作结束后，处理回调，利用<code>clearTimeout </code>和 <code>setTimeout</code>实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能</li><li>函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次</li></ul><p>例如，都设置时间频率为 500ms，在 2 秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在 2s 后，只会执行一次</p><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>防抖在连续的事件，只需触发一次回调的场景有：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><p>节流在间隔一段时间执行一次回调的场景有：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框，搜索联想功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(八)</title>
      <link href="/2024/09/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%85%AB)/"/>
      <url>/2024/09/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%85%AB)/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包的使用场景"><a href="#闭包的使用场景" class="headerlink" title="闭包的使用场景"></a>闭包的使用场景</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p><p>在 <code>JavaScript </code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p><p>下面给出一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">    <span class="title function_">alert</span>(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">displayName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p><h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>任何闭包的使用场景都离不开这两点：</p><ul><li>创建私有变量</li><li>延长变量的生命周期</li></ul><blockquote><p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p></blockquote><p>下面举个例子：</p><p>在页面上添加一些可以调整字号的按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeSizer</span>(<span class="params">size</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = <span class="title function_">makeSizer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> size14 = <span class="title function_">makeSizer</span>(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">var</span> size16 = <span class="title function_">makeSizer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;size-12&quot;</span>).<span class="property">onclick</span> = size12;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;size-14&quot;</span>).<span class="property">onclick</span> = size14;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;size-16&quot;</span>).<span class="property">onclick</span> = size16;</span><br></pre></td></tr></table></figure><h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们有一个求长方形面积的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> width * height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们碰到的长方形的宽老是10</span></span><br><span class="line"><span class="keyword">const</span> area1 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">const</span> area2 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> area3 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">width</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">height</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> width * height;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTenWidthArea = <span class="title function_">getArea</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span><br><span class="line"><span class="keyword">const</span> area1 = <span class="title function_">getTenWidthArea</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span><br><span class="line"><span class="keyword">const</span> getTwentyWidthArea = <span class="title function_">getArea</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h3><p>在<code>JavaScript</code>中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p><p>下面举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Counter</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure><p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p><p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p><p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p><p>原因在于每个对象的创建，方法都会被重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getMessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(四)</title>
      <link href="/2024/09/22/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%83)/"/>
      <url>/2024/09/22/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<h1 id="和-区别"><a href="#和-区别" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;区别"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;区别</h1><h2 id="一、等于操作符"><a href="#一、等于操作符" class="headerlink" title="一、等于操作符"></a>一、等于操作符</h2><p>等于操作符用两个等于号（ &#x3D;&#x3D; ）表示，如果操作数相等，则会返回 <code>true</code></p><p>前面文章，我们提到在<code>JavaScript</code>中存在隐式转换。等于操作符（&#x3D;&#x3D;）在比较中会先进行类型转换，再确定操作数是否相等</p><p>遵循以下规则：</p><p>如果任一操作数是布尔值，则将其转换为数值再比较是否相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="literal">true</span> == <span class="number">1</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="string">&quot;55&quot;</span> == <span class="number">55</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果一个操作数是对象，另一个操作数不是，则调用对象的 <code>valueOf() </code>方法取得其原始值，再根据前面的规则进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result1 = obj == <span class="number">1</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>null </code>和<code>undefined</code>相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果有任一操作数是 <code>NaN</code> ，则相等操作符返回 <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="title class_">NaN</span> == <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let obj1 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let obj2 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let result1 = (obj1 == obj2 ); // false</span><br></pre></td></tr></table></figure><p>下面进一步做个小结：</p><ul><li><p>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</p></li><li><p>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</p></li><li><p>两个都为引用类型，则比较它们是否指向同一个对象</p></li><li><p>null 和 undefined 相等</p></li><li><p>存在 NaN 则返回 false</p></li></ul><h2 id="二、全等操作符"><a href="#二、全等操作符" class="headerlink" title="二、全等操作符"></a>二、全等操作符</h2><p>全等操作符由 3 个等于号（ &#x3D;&#x3D;&#x3D; ）表示，只有两个操作数在不转换的前提下相等才返回 <code>true</code>。即类型相同，值也需相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="string">&quot;55&quot;</span> === <span class="number">55</span>; <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">55</span> === <span class="number">55</span>; <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure><p><code>undefined</code> 和 <code>null</code> 与自身严格相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="literal">null</span> === <span class="literal">null</span>; <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">undefined</span> === <span class="literal">undefined</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p>相等操作符（&#x3D;&#x3D;）会做类型转换，再进行值的比较，全等运算符不会做类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="string">&quot;55&quot;</span> === <span class="number">55</span>; <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">55</span> === <span class="number">55</span>; <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure><p><code>null</code> 和 <code>undefined</code> 比较，相等操作符（&#x3D;&#x3D;）为<code>true</code>，全等为<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">null</span> === <span class="literal">undefined</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> == <span class="string">&quot;0&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&quot;&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&quot;0&quot;</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&quot;false&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&quot;0&quot;</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; \t\r\n&quot;</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但在比较<code>null</code>的情况的时候，我们一般使用相等操作符<code>==</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj.<span class="property">x</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>); <span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于下面写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.<span class="property">x</span> === <span class="literal">null</span> || obj.<span class="property">x</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用相等操作符（&#x3D;&#x3D;）的写法明显更加简洁了</p><p>所以，除了在比较对象属性为<code>null</code>或者<code>undefined</code>的情况下，我们可以使用相等操作符（&#x3D;&#x3D;），其他情况建议一律使用全等操作符（&#x3D;&#x3D;&#x3D;）</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(六)</title>
      <link href="/2024/09/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%85%AD)/"/>
      <url>/2024/09/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM-的常见操作"><a href="#DOM-的常见操作" class="headerlink" title="DOM 的常见操作"></a>DOM 的常见操作</h1><h2 id="一、DOM"><a href="#一、DOM" class="headerlink" title="一、DOM"></a>一、DOM</h2><p>文档对象模型 (DOM) 是 <code>HTML</code> 和 <code>XML</code> 文档的编程接口</p><p>它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容</p><p>任何 <code>HTML </code>或<code>XML</code>文档都可以用 <code>DOM </code>表示为一个由节点构成的层级结构</p><p>节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>DOM</code>像原子包含着亚原子微粒那样，也有很多类型的<code>DOM</code>节点包含着其他类型的节点。接下来我们先看看其中的三种：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述结构中，<code>div</code>、<code>p</code>就是元素节点，<code>content</code>就是文本节点，<code>title</code>就是属性节点</p><h2 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h2><p>日常前端开发，我们都离不开<code>DOM</code>操作</p><p>在以前，我们使用<code>Jquery</code>，<code>zepto</code>等库来操作<code>DOM</code>，之后在<code>vue</code>，<code>Angular</code>，<code>React</code>等框架出现后，我们通过操作数据来控制<code>DOM</code>（绝大多数时候），越来越少的去直接操作<code>DOM</code></p><p>但这并不代表原生操作不重要。相反，<code>DOM</code>操作才能有助于我们理解框架深层的内容</p><p>下面就来分析<code>DOM</code>常见的操作，主要分为：</p><ul><li>创建节点</li><li>查询节点</li><li>更新节点</li><li>添加节点</li><li>删除节点</li></ul><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><h4 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h4><p>创建新元素，接受一个参数，即要创建元素的标签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h4><p>创建一个文本节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textEl = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;content&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到<code>DOM</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br></pre></td></tr></table></figure><p>当请求把一个<code>DocumentFragment</code> 节点插入文档树时，插入的不是 <code>DocumentFragment </code>自身，而是它的所有子孙节点</p><h4 id="createAttribute"><a href="#createAttribute" class="headerlink" title="createAttribute"></a>createAttribute</h4><p>创建属性节点，可以是自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dataAttribute = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;custom&quot;</span>);</span><br><span class="line">consle.<span class="title function_">log</span>(dataAttribute);</span><br></pre></td></tr></table></figure><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><h4 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h4><p>传入任何有效的<code> css</code> 选择器，即可选中单个 <code>DOM </code>元素（首个）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.element&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#element&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=&quot;username&quot;]&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div + p &gt; span&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果页面上没有指定的元素时，返回 <code>null</code></p><h4 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h4><p>返回一个包含节点子树内所有与之相匹配的<code>Element</code>节点列表，如果没有相匹配的，则返回一个空节点列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notLive = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，该方法返回的是一个 <code>NodeList </code>的静态实例，它是一个静态的“快照”，而非“实时”的查询</p><p>关于获取<code>DOM</code>元素的方法还有如下，就不一一述说</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id属性值&quot;</span>);</span><br><span class="line">返回拥有指定id的对象的引用;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;class属性值&quot;</span>);</span><br><span class="line">返回拥有指定<span class="keyword">class</span>的对象集合;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签名&quot;</span>);</span><br><span class="line">返回拥有指定标签名的对象集合;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;name属性值&quot;</span>);</span><br><span class="line">返回拥有指定名称的对象结合;</span><br><span class="line"><span class="variable language_">document</span> / element.<span class="title function_">querySelector</span>(<span class="string">&quot;CSS选择器&quot;</span>);</span><br><span class="line">仅返回第一个匹配的元素;</span><br><span class="line"><span class="variable language_">document</span> / element.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;CSS选择器&quot;</span>);</span><br><span class="line">返回所有匹配的元素;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">获取页面中的<span class="variable constant_">HTML</span>标签;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">获取页面中的<span class="variable constant_">BODY</span>标签;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span>[<span class="string">&quot;&quot;</span>];</span><br><span class="line">获取页面中的所有元素节点的对象集合型;</span><br></pre></td></tr></table></figure><p>除此之外，每个<code>DOM</code>元素还有<code>parentNode</code>、<code>childNodes</code>、<code>firstChild</code>、<code>lastChild</code>、<code>nextSibling</code>、<code>previousSibling</code>属性，关系图如下图所示</p><p><img src="https://static.vue-js.com/c100f450-7fdc-11eb-ab90-d9ae814b240d.png"></p><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>不但可以修改一个<code>DOM</code>节点的文本内容，还可以直接通过<code>HTML</code>片段修改<code>DOM</code>节点内部的子树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="comment">// 设置文本为abc:</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&quot;ABC&quot;</span>; <span class="comment">// &lt;p id=&quot;p&quot;&gt;ABC&lt;/p &gt;</span></span><br><span class="line"><span class="comment">// 设置HTML:</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;</span>;</span><br><span class="line"><span class="comment">// &lt;p&gt;...&lt;/p &gt;的内部结构已修改</span></span><br></pre></td></tr></table></figure><h4 id="innerText、textContent"><a href="#innerText、textContent" class="headerlink" title="innerText、textContent"></a>innerText、textContent</h4><p>自动对字符串进行<code>HTML</code>编码，保证无法设置任何<code>HTML</code>标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span><br><span class="line">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class="line">// 设置文本:</span><br><span class="line">p.innerText = &#x27;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#x27;;</span><br><span class="line">// HTML被自动编码，无法设置一个&lt;script&gt;节点:</span><br><span class="line">// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p &gt;</span><br></pre></td></tr></table></figure><p>两者的区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>DOM</code>节点的<code>style</code>属性对应所有的<code>CSS</code>，可以直接获取或设置。遇到<code>-</code>需要转化为驼峰命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p-id&quot;</span>);</span><br><span class="line"><span class="comment">// 设置CSS:</span></span><br><span class="line">p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#ff0000&quot;</span>;</span><br><span class="line">p.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;20px&quot;</span>; <span class="comment">// 驼峰命名</span></span><br><span class="line">p.<span class="property">style</span>.<span class="property">paddingTop</span> = <span class="string">&quot;2em&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><h4 id="innerHTML-1"><a href="#innerHTML-1" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>如果这个 DOM 节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可以修改<code>DOM</code>节点的内容，相当于添加了新的<code>DOM</code>节点</p><p>如果这个 DOM 节点不是空的，那就不能这么做，因为<code>innerHTML</code>会直接替换掉原来的所有子节点</p><h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h4><p>把一个子节点添加到父节点的最后一个子节点</p><p>举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="variable constant_">HTML</span>结构 --&gt;</span><br><span class="line">&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>添加一个<code>p</code>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">js.<span class="property">innerHTML</span> = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">list.<span class="title function_">appendChild</span>(js);</span><br></pre></td></tr></table></figure><p>现在<code>HTML</code>结构变成了下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="variable constant_">HTML</span>结构 --&gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;  &lt;!-- 添加元素 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上述代码中，我们是获取<code>DOM</code>元素后再进行添加操作，这个<code>js</code>节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置</p><p>如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>),</span><br><span class="line"><span class="keyword">const</span> haskell = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">haskell.<span class="property">id</span> = <span class="string">&#x27;haskell&#x27;</span>;</span><br><span class="line">haskell.<span class="property">innerText</span> = <span class="string">&#x27;Haskell&#x27;</span>;</span><br><span class="line">list.<span class="title function_">appendChild</span>(haskell);</span><br></pre></td></tr></table></figure><h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h4><p>把子节点插入到指定的位置，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentElement.<span class="title function_">insertBefore</span>(newElement, referenceElement);</span><br></pre></td></tr></table></figure><p>子节点会插入到<code>referenceElement</code>之前</p><h4 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h4><p>在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;white&quot;</span>); <span class="comment">//第一个参数属性名，第二个参数属性值。</span></span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的<code>removeChild</code>把自己删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拿到待删除节点:</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;to-be-removed&quot;</span>);</span><br><span class="line"><span class="comment">// 拿到父节点:</span></span><br><span class="line"><span class="keyword">const</span> parent = self.<span class="property">parentElement</span>;</span><br><span class="line"><span class="comment">// 删除:</span></span><br><span class="line"><span class="keyword">const</span> removed = parent.<span class="title function_">removeChild</span>(self);</span><br><span class="line">removed === self; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(五)</title>
      <link href="/2024/09/15/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%BA%94)/"/>
      <url>/2024/09/15/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>首先，<code>JavaScript </code>是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p><p>在<code>JavaScript</code>中，所有的任务都可以分为</p><ul><li><p>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</p></li><li><p>异步任务：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout </code>定时函数等</p></li></ul><p>同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环</p><h2 id="二、宏任务与微任务"><a href="#二、宏任务与微任务" class="headerlink" title="二、宏任务与微任务"></a>二、宏任务与微任务</h2><p>如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Promise&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>执行步骤为：</p><ul><li><code>console.log(1) </code>，同步任务，主线程中执行</li><li><code>setTimeout()</code> ，异步任务，放到 <code>Event Table</code>，0 毫秒后<code>console.log(2) </code>回调推入 <code>Event Queue</code> 中</li><li><code>new Promise</code> ，同步任务，主线程直接执行</li><li><code>.then</code> ，异步任务，放到 <code>Event Table</code></li><li><code>console.log(3)</code>，同步任务，主线程执行</li></ul><p>所以按照分析，它的结果应该是 <code>1</code> &#x3D;&gt; <code>&#39;new Promise&#39;</code> &#x3D;&gt; <code>3</code> &#x3D;&gt; <code>2</code> &#x3D;&gt; <code>&#39;then&#39;</code></p><p>但是实际结果是：<code>1</code>&#x3D;&gt;<code>&#39;new Promise&#39;</code>&#x3D;&gt; <code>3</code> &#x3D;&gt; <code>&#39;then&#39;</code> &#x3D;&gt; <code>2</code></p><p>出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取</p><p>例子中 <code>setTimeout</code>回调事件是先进入队列中的，按理说应该先于 <code>.then</code> 中的执行，但是结果却偏偏相反</p><p>原因在于异步任务还可以细分为微任务与宏任务</p><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p><p>常见的微任务有：</p><ul><li><p>Promise.then</p></li><li><p>MutaionObserver</p></li><li><p>Object.observe（已废弃；Proxy 对象替代）</p></li><li><p>process.nextTick（Node.js）</p></li></ul><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p><p>常见的宏任务有：</p><ul><li>script (可以理解为外层同步代码)</li><li>setTimeout&#x2F;setInterval</li><li>UI rendering&#x2F;UI 事件</li><li>postMessage、MessageChannel</li><li>setImmediate、I&#x2F;O（Node.js）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Promise&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>流程如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遇到 console.log(1) ，直接打印 1</span></span><br><span class="line"><span class="comment">// 遇到定时器，属于新的宏任务，留着后面执行</span></span><br><span class="line"><span class="comment">// 遇到 new Promise，这个是直接执行的，打印 &#x27;new Promise&#x27;</span></span><br><span class="line"><span class="comment">// .then 属于微任务，放入微任务队列，后面再执行</span></span><br><span class="line"><span class="comment">// 遇到 console.log(3) 直接打印 3</span></span><br><span class="line"><span class="comment">// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 &#x27;then&#x27;</span></span><br><span class="line"><span class="comment">// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2</span></span><br></pre></td></tr></table></figure><h2 id="三、async-与-await"><a href="#三、async-与-await" class="headerlink" title="三、async 与 await"></a>三、async 与 await</h2><p><code>async</code> 是异步的意思，<code>await </code>则可以理解为 <code>async wait</code>。所以可以理解<code>async</code>就是用来声明一个异步方法，而 <code>await </code>是用来等待异步方法执行</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code>函数返回一个<code>promise</code>对象，下面两种方法是等效的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;TEST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncF is equivalent to f!</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncF</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise </code>对象，返回该对象的结果。如果不是 <code>Promise </code>对象，就直接返回对应的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="comment">// return 123</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>不管<code>await</code>后面跟着的是什么，<code>await</code>都会阻塞后面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fn2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 阻塞</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>await</code> 会阻塞下面的代码（即加入微任务队列），先执行 <code>async </code>外面的同步代码，同步代码执行完，再回到 <code>async</code> 函数中，再执行之前阻塞的代码</p><p>所以上述输出结果为：<code>1</code>，<code>fn2</code>，<code>3</code>，<code>2</code></p><h2 id="四、流程分析"><a href="#四、流程分析" class="headerlink" title="四、流程分析"></a>四、流程分析</h2><p>通过对上面的了解，我们对<code>JavaScript</code>对各种场景的执行顺序有了大致的了解</p><p>这里直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;settimeout&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>分析过程：</p><ol><li>执行整段代码，遇到 <code>console.log(&#39;script start&#39;)</code> 直接打印结果，输出 <code>script start</code></li><li>遇到定时器了，它是宏任务，先放着不执行</li><li>遇到 <code>async1()</code>，执行 <code>async1</code> 函数，先打印 <code>async1 start</code>，下面遇到<code>await</code>怎么办？先执行 <code>async2</code>，打印 <code>async2</code>，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码</li><li>跳到 <code>new Promise</code> 这里，直接执行，打印 <code>promise1</code>，下面遇到 <code>.then()</code>，它是微任务，放到微任务列表等待执行</li><li>最后一行直接打印 <code>script end</code>，现在同步代码执行完了，开始执行微任务，即 <code>await </code>下面的代码，打印 <code>async1 end</code></li><li>继续执行下一个微任务，即执行 <code>then</code> 的回调，打印 <code>promise2</code></li><li>上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 <code>settimeout</code></li></ol><p>所以最后的结果是：<code>script start</code>、<code>async1 start</code>、<code>async2</code>、<code>promise1</code>、<code>script end</code>、<code>async1 end</code>、<code>promise2</code>、<code>settimeout</code></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(四)</title>
      <link href="/2024/09/09/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%9B%9B)/"/>
      <url>/2024/09/09/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="深拷贝浅拷贝的区别"><a href="#深拷贝浅拷贝的区别" class="headerlink" title="深拷贝浅拷贝的区别"></a>深拷贝浅拷贝的区别</h1><h2 id="一、数据类型存储"><a href="#一、数据类型存储" class="headerlink" title="一、数据类型存储"></a>一、数据类型存储</h2><p><code>JavaScript</code>中存在两大数据类型：</p><ul><li>基本类型</li><li>引用类型</li></ul><p>基本类型数据保存在在栈内存中</p><p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p><h2 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p><p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p><p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p><p>下面简单实现一个浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">      newObj[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p><ul><li><code>Object.assign</code></li><li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li><li>使用拓展运算符实现的复制</li></ul><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">nature</span>: [<span class="string">&quot;smart&quot;</span>, <span class="string">&quot;good&quot;</span>],</span><br><span class="line">  <span class="attr">names</span>: &#123;</span><br><span class="line">    <span class="attr">name1</span>: <span class="string">&quot;fx&quot;</span>,</span><br><span class="line">    <span class="attr">name2</span>: <span class="string">&quot;xka&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">love</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fx is a great girl&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, fxObj);</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.<span class="title function_">concat</span>();</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = [...fxArr];</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h2><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p><p>常见的深拷贝方式有：</p><ul><li><p>_.cloneDeep()</p></li><li><p>jQuery.extend()</p></li><li><p>JSON.stringify()</p></li><li><p>手写循环递归</p></li></ul><h3 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = _.<span class="title function_">cloneDeep</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">b</span>.<span class="property">f</span> === obj2.<span class="property">b</span>.<span class="property">f</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = $.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">b</span>.<span class="property">f</span> === obj2.<span class="property">b</span>.<span class="property">f</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br></pre></td></tr></table></figure><p>但是这种方式存在弊端，会忽略<code>undefined</code>、<code>symbol</code>和<code>函数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">name1</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">name3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">name4</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;A&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;name: &quot;A&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="循环递归"><a href="#循环递归" class="headerlink" title="循环递归"></a>循环递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><p>浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样</p><p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;init&quot;</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title function_">shallowClone</span>(obj1); <span class="comment">// 一个浅拷贝方法</span></span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj3.<span class="property">arr</span>[<span class="number">1</span>] = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]; <span class="comment">// 新旧对象还是共享同一块内存</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1&quot;</span>, obj1); <span class="comment">// obj1 &#123; name: &#x27;init&#x27;,  arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj3&quot;</span>, obj3); <span class="comment">// obj3 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure><p>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;init&quot;</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="title function_">deepClone</span>(obj1); <span class="comment">// 一个深拷贝方法</span></span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj4.<span class="property">arr</span>[<span class="number">1</span>] = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]; <span class="comment">// 新对象跟原对象不共享内存</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1&quot;</span>, obj1); <span class="comment">// obj1 &#123; name: &#x27;init&#x27;, arr: [ 1, [ 2, 3 ], 4 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj4&quot;</span>, obj4); <span class="comment">// obj4 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前提为拷贝类型为引用类型的情况下：</p><ul><li><p>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</p></li><li><p>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(三)</title>
      <link href="/2024/09/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%89)/"/>
      <url>/2024/09/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-的本地存储"><a href="#Javascript-的本地存储" class="headerlink" title="Javascript 的本地存储"></a>Javascript 的本地存储</h1><h2 id="一、方式"><a href="#一、方式" class="headerlink" title="一、方式"></a>一、方式</h2><p><code>javaScript</code>本地缓存的方法我们主要讲述以下四种：</p><ul><li>cookie</li><li>sessionStorage</li><li>localStorage</li><li>indexedDB</li></ul><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><code>Cookie</code>，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 <code>HTTP </code>无状态导致的问题</p><p>作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 <code>cookie </code>有效期、安全性、使用范围的可选属性组成</p><p>但是<code>cookie</code>在每次请求中都会被发送，如果不使用 <code>HTTPS </code>并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 <code>cookie </code>保持登录态的网站上，如果 <code>cookie </code>被窃取，他人很容易利用你的 <code>cookie </code>来假扮成你登录网站</p><p>关于<code>cookie</code>常用的属性如下：</p><ul><li>Expires 用于设置 Cookie 的过期时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Expires</span>=<span class="title class_">Wed</span>, <span class="number">21</span> <span class="title class_">Oct</span> <span class="number">2015</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> <span class="variable constant_">GMT</span></span><br></pre></td></tr></table></figure><ul><li>Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比<code>Expires</code>高）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Max</span>-<span class="title class_">Age</span>=<span class="number">604800</span></span><br></pre></td></tr></table></figure><ul><li><code>Domain </code>指定了 <code>Cookie</code> 可以送达的主机名</li><li><code>Path </code>指定了一个 <code>URL </code>路径，这个路径必须出现在要请求的资源的路径中才可以发送 <code>Cookie</code> 首部</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Path</span>=<span class="regexp">/docs   # /</span>docs/<span class="title class_">Web</span>/ 下的资源会带 <span class="title class_">Cookie</span> 首部</span><br></pre></td></tr></table></figure><ul><li>标记为 <code>Secure </code>的 <code>Cookie </code>只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端</li></ul><p>通过上述，我们可以看到<code>cookie</code>又开始的作用并不是为了缓存而设计出来，只是借用了<code>cookie</code>的特性实现缓存</p><p>关于<code>cookie</code>的使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;名字=值&quot;</span>;</span><br></pre></td></tr></table></figure><p>关于<code>cookie</code>的修改，首先要确定<code>domain</code>和<code>path</code>属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的<code>cookie</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>:name=aa; domain=aa.<span class="property">net</span>; path=/  # 服务端设置</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> =name=bb; domain=aa.<span class="property">net</span>; path=/  # 客户端设置</span><br></pre></td></tr></table></figure><p>最后<code>cookie</code>的删除，最常用的方法就是给<code>cookie</code>设置一个过期的事件，这样<code>cookie</code>过期后会被浏览器删除</p><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p><code>HTML5</code>新方法，IE8 及以上浏览器都兼容</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的</li><li>存储的信息在同一域中是共享的</li><li>当本页操作（新增、修改、删除）了<code>localStorage</code>的时候，本页面不会触发<code>storage</code>事件,但是别的页面会触发<code>storage</code>事件。</li><li>大小：5M（跟浏览器厂商有关系）</li><li><code>localStorage</code>本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>受同源策略的限制</li></ul><p>下面再看看关于<code>localStorage</code>的使用</p><p>设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;cfangxu&quot;</span>);</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure><p>获取键名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">key</span>(<span class="number">0</span>); <span class="comment">//获取第一个键名</span></span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure><p>一次性清除所有存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p><code>localStorage</code> 也不是完美的，它有两个缺点：</p><ul><li>无法像<code>Cookie</code>一样设置过期时间</li><li>只能存入字符串，无法直接存对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>)); <span class="comment">// &#x27;[object, Object]&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p><code>sessionStorage </code>和 <code>localStorage </code>使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，<code>sessionStorage</code> 将会删除数据</p><h3 id="扩展的前端存储方式"><a href="#扩展的前端存储方式" class="headerlink" title="扩展的前端存储方式"></a>扩展的前端存储方式</h3><p><code>indexedDB </code>是一种低级 API，用于客户端存储大量结构化数据(包括, 文件&#x2F; blobs)。该 API 使用索引来实现对该数据的高性能搜索</p><p>虽然 <code>Web Storage </code>对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。<code>IndexedDB</code>提供了一个解决方案</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>储存量理论上没有上限</li><li>所有操作都是异步的，相比 <code>LocalStorage</code> 同步操作性能更高，尤其是数据量较大时</li><li>原生支持储存<code>JS</code>的对象</li><li>是个正经的数据库，意味着数据库能干的事它都能干</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>操作非常繁琐</li><li>本身有一定门槛</li></ul><p>关于<code>indexedDB</code>的使用基本使用步骤如下：</p><ul><li><p>打开数据库并且开始一个事务</p></li><li><p>创建一个 <code>object store</code></p></li><li><p>构建一个请求来执行一些数据库操作，像增加或提取数据等。</p></li><li><p>通过监听正确类型的 <code>DOM</code> 事件以等待操作完成。</p></li><li><p>在操作结果上进行一些操作（可以在 <code>request </code>对象中找到）</p></li></ul><p>关于使用<code>indexdb</code>的使用会比较繁琐，大家可以通过使用<code>Godb.js</code>库进行缓存，最大化的降低操作难度</p><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>关于<code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>三者的区别主要如下：</p><ul><li><p>存储大小：<code> cookie</code>数据大小不能超过<code>4k</code>，<code>sessionStorage</code>和<code>localStorage </code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到 5M 或更大</p></li><li><p>有效时间：<code>localStorage  </code>存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； <code>sessionStorage  </code>数据在当前浏览器窗口关闭后自动删除；<code>cookie</code>设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</p></li><li><p>数据与服务器之间的交互方式，<code>  cookie</code>的数据会自动的传递到服务器，服务器端也可以写<code>cookie</code>到客户端； <code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p></li></ul><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：</p><ul><li>标记用户与跟踪用户行为的情况，推荐使用<code>cookie</code></li><li>适合长期保存在本地的数据（令牌），推荐使用<code>localStorage</code></li><li>敏感账号一次性登录，推荐使用<code>sessionStorage</code></li><li>存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用<code>indexedDB</code></li></ul><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul><li><a href="https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ">https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ</a></li><li><a href="https://github.com/chenstarx/GoDB.js">https://github.com/chenstarx/GoDB.js</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(二)</title>
      <link href="/2024/09/02/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%BA%8C)/"/>
      <url>/2024/09/02/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-字符串的常用方法"><a href="#JavaScript-字符串的常用方法" class="headerlink" title="JavaScript 字符串的常用方法"></a>JavaScript 字符串的常用方法</h1><h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p><p>除了常用<code>+</code>以及<code>$&#123;&#125;</code>进行字符串拼接之外，还可通过<code>concat</code></p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>用于将一个或多个字符串拼接成一个新字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.<span class="title function_">concat</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p><p>常见的有：</p><ul><li>slice()</li><li>substr()</li><li>substring()</li></ul><p>这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p><p>常见的有：</p><ul><li><p>trim()、trimLeft()、trimRight()</p></li><li><p>repeat()</p></li><li><p>padStart()、padEnd()</p></li><li><p>toLowerCase()、 toUpperCase()</p></li></ul><h4 id="trim-、trimLeft-、trimRight"><a href="#trim-、trimLeft-、trimRight" class="headerlink" title="trim()、trimLeft()、trimRight()"></a>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> trimmedStringValue = stringValue.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue); <span class="comment">// &quot; hello world &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimmedStringValue); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;na &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.<span class="title function_">repeat</span>(<span class="number">2</span>); <span class="comment">// na na</span></span><br></pre></td></tr></table></figure><h4 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>)); <span class="comment">// &quot; foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;......foo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="toLowerCase-、-toUpperCase"><a href="#toLowerCase-、-toUpperCase" class="headerlink" title="toLowerCase()、 toUpperCase()"></a>toLowerCase()、 toUpperCase()</h3><p>大小写转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toUpperCase</span>()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toLowerCase</span>()); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>除了通过索引的方式获取字符串的值，还可通过：</p><ul><li><p>chatAt()</p></li><li><p>indexOf()</p></li><li><p>startWith()</p></li><li><p>includes()</p></li></ul><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">charAt</span>(<span class="number">2</span>)); <span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="startWith-、includes"><a href="#startWith-、includes" class="headerlink" title="startWith()、includes()"></a>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">startsWith</span>(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">startsWith</span>(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">includes</span>(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">includes</span>(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="二、转换方法"><a href="#二、转换方法" class="headerlink" title="二、转换方法"></a>二、转换方法</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>把字符串按照指定的分割符，拆分成数组中的每一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12+23+34&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;+&quot;</span>); <span class="comment">// [12,23,34]</span></span><br></pre></td></tr></table></figure><h2 id="三、模板匹配方法"><a href="#三、模板匹配方法" class="headerlink" title="三、模板匹配方法"></a>三、模板匹配方法</h2><p>针对正则表达式，字符串设计了几个方法：</p><ul><li>match()</li><li>search()</li><li>replace()</li></ul><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>]); <span class="comment">// &quot;cat&quot;</span></span><br></pre></td></tr></table></figure><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pos = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pos); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;cond, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之js(一)</title>
      <link href="/2024/09/01/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%80)/"/>
      <url>/2024/09/01/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bjs(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p><p>下面对数组常用的操作方法做一个归纳</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p><ul><li>push()</li><li>unshift()</li><li>splice()</li><li>concat()</li></ul><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = []; <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">push</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 推入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 从数组开头推入两项</span></span><br><span class="line"><span class="title function_">alert</span>(count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,yellow,orange,green,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors2); <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p><ul><li>pop()</li><li>shift()</li><li>splice()</li><li>slice()</li></ul><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code> length</code> 值，返回被删除的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">pop</span>(); <span class="comment">// 取得最后一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code> length</code> 值，返回被删除的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">shift</span>(); <span class="comment">// 取得第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="splice-1"><a href="#splice-1" class="headerlink" title="splice()"></a>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 删除第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// green,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,green,blue,yellow,purple</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors2); <span class="comment">// green,blue,yellow,purple</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors3); <span class="comment">// green,blue,yellow</span></span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p><h4 id="splice-2"><a href="#splice-2" class="headerlink" title="splice()"></a>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>即查找元素，返回元素坐标或者元素值</p><ul><li>indexOf()</li><li>includes()</li><li>find()</li></ul><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">includes</span>(<span class="number">4</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>返回第一个匹配的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Matt&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line">people.<span class="title function_">find</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> element.<span class="property">age</span> &lt; <span class="number">28</span>); <span class="comment">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二、排序方法"><a href="#二、排序方法" class="headerlink" title="二、排序方法"></a>二、排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p><ul><li>reverse()</li><li>sort()</li></ul><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>顾名思义，将数组元素方向反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="title function_">alert</span>(values); <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="title function_">alert</span>(values); <span class="comment">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure><h2 id="三、转换方法"><a href="#三、转换方法" class="headerlink" title="三、转换方法"></a>三、转换方法</h2><p>常见的转换方法有：</p><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>)); <span class="comment">// red,green,blue</span></span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">join</span>(<span class="string">&quot;||&quot;</span>)); <span class="comment">// red||green||blue</span></span><br></pre></td></tr></table></figure><h2 id="四、迭代方法"><a href="#四、迭代方法" class="headerlink" title="四、迭代方法"></a>四、迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p><ul><li>some()</li><li>every()</li><li>forEach()</li><li>filter()</li><li>map()</li></ul><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有 1 个元素返回 true ，则这个方法返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult); <span class="comment">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult); <span class="comment">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米手环部分型号之间的对比(自用)</title>
      <link href="/2024/08/04/%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF%E9%83%A8%E5%88%86%E5%9E%8B%E5%8F%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AF%B9%E6%AF%94(%E8%87%AA%E7%94%A8)/"/>
      <url>/2024/08/04/%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF%E9%83%A8%E5%88%86%E5%9E%8B%E5%8F%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AF%B9%E6%AF%94(%E8%87%AA%E7%94%A8)/</url>
      
        <content type="html"><![CDATA[<h3 id="对比一览"><a href="#对比一览" class="headerlink" title="对比一览"></a>对比一览</h3><table><thead><tr><th>名称</th><th>小米手环 9</th><th>小米手环 8</th><th>小米手环 8 Pro</th><th>小米 Redmi Watch 4</th></tr></thead><tbody><tr><td>参考价格</td><td>¥249</td><td>¥198</td><td>¥397</td><td>¥496</td></tr><tr><td>功能</td><td>更精准的心率监测、血氧、更精准的睡眠监测</td><td>心率监测、血氧、睡眠监测</td><td>心率监测、血氧、GNSS 轨迹定位、60 种运动模式</td><td>心率监测、血氧、睡眠监测、GNSS 轨迹定位</td></tr><tr><td>重量</td><td>15.8g(不含腕带)</td><td>22.5g(不含腕带)</td><td>22.5g(不含腕带)</td><td>31.5g(不含腕带)</td></tr><tr><td>续航</td><td>约 21 天</td><td>约 16 天</td><td>约 14 天</td><td>约 20 天</td></tr><tr><td>质感</td><td>TPU 腕带、金属、陶瓷外壳</td><td>PC 塑料外壳、TPU 腕带</td><td>纤维高强度聚合物+NCVM 外壳、高质感金属中框</td><td>铝合金中框 不锈钢表冠 现纤维高高强聚合物</td></tr><tr><td>屏幕</td><td>屏幕亮度显著提升 AMOLED 1.62 英寸</td><td>AMOLED 1.56 英寸</td><td>1.74 英寸 AMOLED</td><td>1.97 英寸 AMOLED</td></tr><tr><td>体验</td><td>Z 轴线性马达、5ATM 防水、蓝牙 5.4、充电时间 60min</td><td>转子马达、5ATM 防水、蓝牙 5.1、充电时间 60min</td><td>转子马达、蓝牙 5.3、充电时间 80min</td><td>蓝牙 5.0、5ATM 防 充电时间 85min</td></tr></tbody></table><h3 id="小米手环-9"><a href="#小米手环-9" class="headerlink" title="小米手环 9"></a>小米手环 9</h3><p><img src="https://qna.smzdm.com/202407/19/669a7376e7d5c9067.png_fo742.jpg" alt="小米手环9"></p><p><img src="https://am.zdmimg.com/202407/19/669a7332722fa8342.png_e1080.jpg" alt="小米手环9"></p><h3 id="小米手环-8"><a href="#小米手环-8" class="headerlink" title="小米手环 8"></a>小米手环 8</h3><p><img src="https://qna.smzdm.com/202309/12/650000ec70e9c4441.jpg_fo742.jpg" alt="小米手环8"></p><p><img src="https://am.zdmimg.com/202309/12/6500009013b6f9850.jpg_e1080.jpg" alt="小米手环8"></p><h3 id="小米手环-8-Pro"><a href="#小米手环-8-Pro" class="headerlink" title="小米手环 8 Pro"></a>小米手环 8 Pro</h3><p><img src="https://am.zdmimg.com/202308/25/64e81dd7a46997851.jpg_e1080.jpg" alt="小米手环8 Pro"></p><p><img src="https://am.zdmimg.com/202308/25/64e81dd7a25b28772.jpg_e1080.jpg" alt="小米手环8 Pro"></p><h3 id="小米-Redmi-Watch-4"><a href="#小米-Redmi-Watch-4" class="headerlink" title="小米 Redmi Watch 4"></a>小米 Redmi Watch 4</h3><p><img src="https://qnam.smzdm.com/202302/13/63ea061640d243071.jpg_e1080.jpg" alt="小米 Redmi Watch 4"></p><p><img src="https://qnam.smzdm.com/202312/06/65706a58b8e1d5417.jpg_e1080.jpg" alt="小米 Redmi Watch 4"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.bandbbs.cn/">米坛社区</a></li><li><a href="https://www.mi.com/">小米官方网站</a></li><li><a href="https://post.smzdm.com/">什么值得买</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之http</title>
      <link href="/2024/07/11/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bhttp/"/>
      <url>/2024/07/11/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bhttp/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器从输查找缓存"><a href="#浏览器从输查找缓存" class="headerlink" title="浏览器从输查找缓存"></a>浏览器从输查找缓存</h3><h4 id="合成-URL"><a href="#合成-URL" class="headerlink" title="合成 URL"></a>合成 URL</h4><p>浏览区会判断用户输入是否为合法 URL（Uniform Resource Locator,统一资源定位器）。如果用户输入的是搜索关键词，默认的搜索引擎会合成新的 URL。如果符合 URL 规则，会根据 URL 协议，在这段内容加上协议合成合法的 URL。</p><h4 id="查找缓存"><a href="#查找缓存" class="headerlink" title="查找缓存"></a>查找缓存</h4><p>网络进程获取到 URL，先去本地缓存中查找是否有缓存资源，如果有则拦截请求，直接将缓存资源返回给浏览器进程；否则，进入网络请求阶段。</p><h4 id="DNS-解析（域名系统-Domain-Name-System）"><a href="#DNS-解析（域名系统-Domain-Name-System）" class="headerlink" title="DNS 解析（域名系统 Domain Name System）"></a>DNS 解析（域名系统 Domain Name System）</h4><p>DNS 查找数据缓存服务中是否缓存过当前域名信息，有则直接返回；否则，会进行 DNS 解析返回域名对应的 IP 和端口号，如果没有指定端口号，http 默认 80 端口，https 默认 443。如果是 https 请求，还需要建立 TLS 连接（传输层安全性协议 Transport Layer Security）。</p><h4 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h4><p><strong>建立 TCP 连接</strong>：<br>TCP 三次握手与服务器建立连接，然后进行数据的传输；</p><p><strong>发送 HTTP 请求</strong>：<br>浏览器首先会向服务器发送请求行，它包含了请求方法、请求 URI（统一资源标识符 Uniform Resource Identifier）和 HTTP 协议的版本；还会发送请求头，告诉服务器一些浏览器的相关信息，比如浏览器内核，请求域名；</p><p><strong>服务器处理请求</strong>：<br>服务器首先返回响应头+响应行，响应行包括协议版本和状态码。</p><h4 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h4><p>查看响应头的信息，做不同的处理，比如重定向，存储 cookie；看看 content-type 的值，根据不同的资源类型来用不同的解析方式。</p><h4 id="断开-TCP-连接"><a href="#断开-TCP-连接" class="headerlink" title="断开 TCP 连接"></a>断开 TCP 连接</h4><p>数据传输完成，正常情况下 TCP 将四次挥手断开连接。</p><hr><h3 id="HTTP-和-HTTPS-区别"><a href="#HTTP-和-HTTPS-区别" class="headerlink" title="HTTP 和 HTTPS 区别"></a>HTTP 和 HTTPS 区别</h3><ol><li><code>HTTP</code> 的 URL 以 http:&#x2F;&#x2F; 开头，而 HTTPS 的 URL 以 https:&#x2F;&#x2F; 开头。</li><li><code>HTTP</code> 无法加密，而 HTTPS 对传输的数据进行加密，安全。</li><li><code>HTTP</code> 标准端口是 80 ，而 HTTPS 的标准端口是 443。</li><li>在 OSI 网络模型中，HTTP 工作于应用层，而 HTTPS 的安全传输机制工作在传输层。</li></ol><p>HTTPS 是密文传输数据，HTTP 是明文传输数据。HTTPS 协议 &#x3D; HTTP 协议 + SSl&#x2F;TLS 协议。用 SSL&#x2F;TLS 对数据进行加密和解密。SSL 的全称是 Secure Sockets Layer，即安全套接层协议。TLS 的全称是 Transport Layer Security，即安全传输层协议。对数据进行对称加密，对对称加密所要使用的秘钥进行非对称加密传输。</p><p>服务端的公钥和私钥，用来进行非对称加密。客户端生成的随机秘钥，用来进行对称加密。</p><hr><h3 id="GET-和-POST-发送请求"><a href="#GET-和-POST-发送请求" class="headerlink" title="GET 和 POST 发送请求"></a>GET 和 POST 发送请求</h3><p>HTTP 协议中的两种发送请求的方法。</p><h4 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h4><p><strong>同</strong>：GET 和 POST 本质上就是 TCP 链接。</p><p><strong>异</strong>：</p><ul><li>数据包数量：GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。（并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。）</li><li>过程：<ul><li>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；</li><li>对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</li></ul></li></ul><p>对于 POST 请求方式，可以将请求数据打包在请求体中，并通过 Headers 头部信息里的 “Content-Type” 字段指定请求体的数据类型为 JSON，并且在服务端返回相应头信息的时候也指定返回类型为 JSON。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。在网络环境差的情况下，两次包的 TCP 在验证数据包完整性上，有非常大的优点。因为 GET 一般用于查询信息，POST 一般用于提交某种信息进行某些修改操作（私密性的信息如注册、登陆），所以 GET 在浏览器回退不会再次请求，POST 会再次提交请求。</p><p>因为 GET 在浏览器回退不会再次请求，POST 会再次提交请求，所以 GET 请求会被浏览器主动缓存，POST 不会，要手动设置。</p><p>GET 请求参数会被完整保留在浏览器历史记录里，POST 中的参数不会。</p><p>因为 GET 请求参数会被完整保留在浏览器历史记录里，所以 GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有限制。</p><p>因为 GET 参数通过 URL 传递，POST 放在 Request body 中，所以 GET 参数暴露在地址栏不安全，POST 放在报文内部更安全。</p><hr><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><p>状态码是由 3 位数组成，第一个数字定义了响应的类别，且有五种可能取值：</p><ol><li>1xx Informational（信息状态码）：接受请求正在处理</li><li>2xx Success（成功状态码）：请求正常处理完毕</li><li>3xx Redirection（重定向状态码）：需要附加操作已完成请求</li><li>4xx Client Error（客户端错误状态码）：服务器无法处理请求</li><li>5xx Server Error（服务器错误状态码）：服务器处理请求出错</li></ol><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li>200 响应成功</li><li>204 返回无内容</li><li>301 永久重定向（请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。）</li><li>302 临时重定向（服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。）</li><li>304 资源缓存（自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。）</li><li>400 错误请求（请求格式错误，服务器不理解请求的语法。）</li><li>422 无法处理（请求格式正确，但是由于含有语义错误，无法响应）</li><li>401 未授权（请求要求身份验证。）</li><li>403 服务器禁止访问</li><li>404 服务器找不到请求的网页</li><li>500、502 服务器内部错误</li><li>504 服务器繁忙</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是prd</title>
      <link href="/2024/07/02/%E4%BB%80%E4%B9%88%E6%98%AF%20prd/"/>
      <url>/2024/07/02/%E4%BB%80%E4%B9%88%E6%98%AF%20prd/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-PRD"><a href="#什么是-PRD" class="headerlink" title="什么是 PRD"></a>什么是 PRD</h3><p>PRD（Product Requirement Document，产品需求文档）是用于描述产品需求和特性的文件。它通常由产品经理编写，用于指导开发团队理解和实现产品。PRD 包含产品的目标、功能需求、用户故事、技术要求等信息，是产品开发过程中的重要文档。</p><h3 id="怎么写-PRD"><a href="#怎么写-PRD" class="headerlink" title="怎么写 PRD"></a>怎么写 PRD</h3><p>编写 PRD 的步骤如下：</p><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><ul><li><strong>项目名称</strong>：项目的名称</li><li><strong>项目背景</strong>：简要描述项目背景和目标</li><li><strong>项目负责人</strong>：列出相关人员及其职责</li></ul><h4 id="2-目标和目标用户"><a href="#2-目标和目标用户" class="headerlink" title="2. 目标和目标用户"></a>2. 目标和目标用户</h4><ul><li><strong>项目目标</strong>：描述产品的核心目标和预期效果</li><li><strong>目标用户</strong>：定义产品的主要用户群体及其需求</li></ul><h4 id="3-功能需求"><a href="#3-功能需求" class="headerlink" title="3. 功能需求"></a>3. 功能需求</h4><ul><li><strong>核心功能</strong>：列出产品的核心功能模块</li><li><strong>详细功能说明</strong>：对每个功能模块进行详细描述，包括功能的具体需求、用户交互流程、界面设计等</li></ul><h4 id="4-用户故事"><a href="#4-用户故事" class="headerlink" title="4. 用户故事"></a>4. 用户故事</h4><ul><li><strong>用户故事</strong>：从用户的角度描述他们在使用产品时的场景和需求，每个用户故事应包括用户类型、需求、操作步骤及预期结果</li></ul><h4 id="5-技术需求"><a href="#5-技术需求" class="headerlink" title="5. 技术需求"></a>5. 技术需求</h4><ul><li><strong>系统架构</strong>：描述产品的技术架构，包括前端、后端、数据库等</li><li><strong>技术栈</strong>：列出使用的编程语言、框架、工具等</li><li><strong>性能需求</strong>：包括响应时间、并发用户数、数据存储要求等</li></ul><h4 id="6-非功能需求"><a href="#6-非功能需求" class="headerlink" title="6. 非功能需求"></a>6. 非功能需求</h4><ul><li><strong>安全性</strong>：描述产品的安全需求，如用户数据保护、访问控制等</li><li><strong>可维护性</strong>：描述代码质量、文档要求、测试需求等</li><li><strong>可扩展性</strong>：描述系统在未来扩展时的需求，如模块化设计、可扩展的数据库架构等</li></ul><h4 id="7-里程碑和时间表"><a href="#7-里程碑和时间表" class="headerlink" title="7. 里程碑和时间表"></a>7. 里程碑和时间表</h4><ul><li><strong>开发时间表</strong>：列出项目的关键里程碑和对应的时间节点</li><li><strong>测试计划</strong>：描述测试阶段的计划，包括测试类型、测试时间和负责人员</li></ul><h4 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h4><ul><li><strong>风险管理</strong>：列出项目可能遇到的风险及应对措施</li><li><strong>依赖关系</strong>：描述项目中各部分的依赖关系及与其他项目的关联</li></ul><hr><h3 id="一份简单的-PRD-示例"><a href="#一份简单的-PRD-示例" class="headerlink" title="一份简单的 PRD 示例"></a>一份简单的 PRD 示例</h3><p><strong>项目名称</strong>：电商平台前端开发</p><p><strong>项目背景</strong>：为了提供更好的用户体验，我们计划重新设计和开发电商平台的前端，使其更加高效、美观和易用。</p><p><strong>项目负责人</strong>：产品经理：张三；前端开发负责人：李四</p><p><strong>项目目标</strong>：提升用户在电商平台的浏览和购买体验，提高平台的用户留存率和转化率。</p><p><strong>目标用户</strong>：在线购物用户、商家用户</p><p><strong>核心功能</strong>：</p><ol><li>用户注册和登录</li><li>商品浏览和搜索</li><li>购物车和结算</li><li>用户个人中心</li></ol><p><strong>详细功能说明</strong>：</p><ol><li><p><strong>用户注册和登录</strong>：</p><ul><li>用户可以使用邮箱或手机号注册和登录</li><li>支持第三方登录（如 Google、Facebook）</li></ul></li><li><p><strong>商品浏览和搜索</strong>：</p><ul><li>提供分类浏览和关键词搜索功能</li><li>支持筛选和排序（如价格、销量、评价）</li></ul></li><li><p><strong>购物车和结算</strong>：</p><ul><li>用户可以将商品添加到购物车并进行结算</li><li>提供多种支付方式（如信用卡、PayPal）</li></ul></li><li><p><strong>用户个人中心</strong>：</p><ul><li>用户可以查看和管理个人信息、订单、收藏等</li><li>提供售后服务入口</li></ul></li></ol><p><strong>技术需求</strong>：</p><ul><li>前端框架：React、Redux</li><li>样式处理：Sass、CSS Modules</li><li>构建工具：Webpack、Babel</li><li>API 通信：Axios</li></ul><p><strong>性能需求</strong>：</p><ul><li>页面加载时间：&lt; 2 秒</li><li>并发用户数：5000+</li></ul><p><strong>安全性</strong>：</p><ul><li>数据加密传输</li><li>防止 XSS 和 CSRF 攻击</li><li>用户权限管理</li></ul><p><strong>开发时间表</strong>：</p><ul><li>需求分析：1 周</li><li>设计与原型：2 周</li><li>开发：6 周</li><li>测试：3 周</li><li>上线：1 周</li></ul><p><strong>风险管理</strong>：</p><ul><li>数据泄露风险：使用强加密技术</li><li>功能延迟风险：采用敏捷开发方法，进行定期评审</li></ul><p><strong>依赖关系</strong>：</p><ul><li>与后端 API 的对接</li><li>与第三方支付和登录服务的集成</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git之删除分支</title>
      <link href="/2024/06/21/git%E4%B9%8B%E8%8E%B7%E5%8F%96%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF/"/>
      <url>/2024/06/21/git%E4%B9%8B%E8%8E%B7%E5%8F%96%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-删除远程分支"><a href="#1-删除远程分支" class="headerlink" title="1. 删除远程分支"></a>1. 删除远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch_name]</span><br></pre></td></tr></table></figure><h2 id="2-删除本地分支"><a href="#2-删除本地分支" class="headerlink" title="2. 删除本地分支"></a>2. 删除本地分支</h2><h3 id="git-branch-d-和-git-branch-D-的区别"><a href="#git-branch-d-和-git-branch-D-的区别" class="headerlink" title="git branch -d 和 git branch -D 的区别"></a><code>git branch -d</code> 和 <code>git branch -D</code> 的区别</h3><ul><li><code>git branch -d</code>: 会在删除前检查合并状态（与上游分支或者与 HEAD）。</li><li><code>git branch -D</code>: 是 <code>git branch --delete --force</code> 的简写，直接删除分支。</li></ul><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul><li>都是删除本地分支的方法（与删除远程分支命令独立运行）。要想本地和远程分支都删除，必须分别运行两个命令。</li></ul><h2 id="3-查看分支"><a href="#3-查看分支" class="headerlink" title="3. 查看分支"></a>3. 查看分支</h2><ul><li><p>查看本地分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>查看远程分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li><li><p>查看本地和远程分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4. 删除分支"></a>4. 删除分支</h2><ul><li><p>删除本地分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 本地分支名</span><br></pre></td></tr></table></figure></li><li><p>删除远程分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 远程分支名</span><br></pre></td></tr></table></figure></li><li><p>推送空分支到远程（删除远程分支的另一种方法）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :远程分支名</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之node.js（一）</title>
      <link href="/2024/06/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bnode.js%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/06/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bnode.js%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-中的解构赋值与拓展运算符-的用法"><a href="#JavaScript-中的解构赋值与拓展运算符-的用法" class="headerlink" title="JavaScript 中的解构赋值与拓展运算符 ... 的用法"></a>JavaScript 中的解构赋值与拓展运算符 <code>...</code> 的用法</h3><p>JavaScript 中的解构赋值和拓展运算符 <code>...</code> 是 ES6 中引入的非常强大的特性，它们能够简化代码并提高可读性。下面分别介绍它们的用法。</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值可以从数组或对象中提取值，然后赋值给变量。</p><h5 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值从数组中提取值</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = array;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h5 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值从对象中提取值</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, city &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// New York</span></span><br></pre></td></tr></table></figure><h4 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符 ..."></a>拓展运算符 <code>...</code></h4><p>拓展运算符 <code>...</code> 可以在数组和对象中使用，主要用于拷贝、合并以及传递不定数量的参数。</p><h5 id="数组中的拓展运算符"><a href="#数组中的拓展运算符" class="headerlink" title="数组中的拓展运算符"></a>数组中的拓展运算符</h5><h6 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [...array1];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array2); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h6 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArray = [...array1, ...array2];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h6 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h5 id="对象中的拓展运算符"><a href="#对象中的拓展运算符" class="headerlink" title="对象中的拓展运算符"></a>对象中的拓展运算符</h5><h6 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> person2 = &#123; ...person1 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure><h6 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> job = &#123; <span class="attr">title</span>: <span class="string">&quot;Developer&quot;</span>, <span class="attr">company</span>: <span class="string">&quot;XYZ&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> personWithJob = &#123; ...person1, ...job &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personWithJob); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, title: &#x27;Developer&#x27;, company: &#x27;XYZ&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="解构赋值与拓展运算符结合使用"><a href="#解构赋值与拓展运算符结合使用" class="headerlink" title="解构赋值与拓展运算符结合使用"></a>解构赋值与拓展运算符结合使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Developer&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象中提取部分属性，其余的属性使用拓展运算符保留</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, ...rest &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123; city: &#x27;New York&#x27;, job: &#x27;Developer&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之es6（一）</title>
      <link href="/2024/06/15/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bes6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/06/15/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bes6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-中的解构赋值与拓展运算符-的用法"><a href="#JavaScript-中的解构赋值与拓展运算符-的用法" class="headerlink" title="JavaScript 中的解构赋值与拓展运算符 ... 的用法"></a>JavaScript 中的解构赋值与拓展运算符 <code>...</code> 的用法</h3><p>JavaScript 中的解构赋值和拓展运算符 <code>...</code> 是 ES6 中引入的非常强大的特性，它们能够简化代码并提高可读性。下面分别介绍它们的用法。</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值可以从数组或对象中提取值，然后赋值给变量。</p><h5 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值从数组中提取值</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = array;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h5 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值从对象中提取值</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, city &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// New York</span></span><br></pre></td></tr></table></figure><h4 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符 ..."></a>拓展运算符 <code>...</code></h4><p>拓展运算符 <code>...</code> 可以在数组和对象中使用，主要用于拷贝、合并以及传递不定数量的参数。</p><h5 id="数组中的拓展运算符"><a href="#数组中的拓展运算符" class="headerlink" title="数组中的拓展运算符"></a>数组中的拓展运算符</h5><h6 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [...array1];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array2); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h6 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArray = [...array1, ...array2];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h6 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h5 id="对象中的拓展运算符"><a href="#对象中的拓展运算符" class="headerlink" title="对象中的拓展运算符"></a>对象中的拓展运算符</h5><h6 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> person2 = &#123; ...person1 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure><h6 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> job = &#123; <span class="attr">title</span>: <span class="string">&quot;Developer&quot;</span>, <span class="attr">company</span>: <span class="string">&quot;XYZ&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> personWithJob = &#123; ...person1, ...job &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personWithJob); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, title: &#x27;Developer&#x27;, company: &#x27;XYZ&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="解构赋值与拓展运算符结合使用"><a href="#解构赋值与拓展运算符结合使用" class="headerlink" title="解构赋值与拓展运算符结合使用"></a>解构赋值与拓展运算符结合使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Developer&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象中提取部分属性，其余的属性使用拓展运算符保留</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, ...rest &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123; city: &#x27;New York&#x27;, job: &#x27;Developer&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之css（四）</title>
      <link href="/2024/06/14/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/06/14/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><p>Flex 布局是 CSS3 中的一种布局方式，它通过简化布局的实现过程，极大地增强了 CSS 布局的能力。使用 Flex 布局可以轻松地创建各种复杂的布局。</p><h4 id="Flex-容器与项目"><a href="#Flex-容器与项目" class="headerlink" title="Flex 容器与项目"></a>Flex 容器与项目</h4><ul><li><strong>Flex 容器</strong>：设置了 <code>display: flex</code> 或 <code>display: inline-flex</code> 的元素。</li><li><strong>Flex 项目</strong>：容器内部的子元素。</li></ul><h5 id="常见的-Flex-属性"><a href="#常见的-Flex-属性" class="headerlink" title="常见的 Flex 属性"></a>常见的 Flex 属性</h5><h6 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h6><ol><li><p><strong>display</strong>：指定为 Flex 容器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>flex-direction</strong>：定义主轴方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row; <span class="comment">/* 默认值，可以是row, row-reverse, column, column-reverse */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>justify-content</strong>：定义主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 可以是flex-start, flex-end, center, space-between, space-around, space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>align-items</strong>：定义交叉轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 可以是flex-start, flex-end, center, baseline, stretch */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>flex-wrap</strong>：定义是否换行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/* 可以是nowrap, wrap, wrap-reverse */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h6><ol><li><p><strong>flex</strong>：指定项目如何分配空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 可以是flex-grow, flex-shrink, flex-basis的缩写 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>align-self</strong>：允许单个项目有不同的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center; <span class="comment">/* 可以是auto, flex-start, flex-end, center, baseline, stretch */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用-Flex-布局实现居中"><a href="#使用-Flex-布局实现居中" class="headerlink" title="使用 Flex 布局实现居中"></a>使用 Flex 布局实现居中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flex布局居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-Flex-布局实现两栏布局"><a href="#使用-Flex-布局实现两栏布局" class="headerlink" title="使用 Flex 布局实现两栏布局"></a>使用 Flex 布局实现两栏布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flex布局两栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-Flex-布局实现三栏布局"><a href="#使用-Flex-布局实现三栏布局" class="headerlink" title="使用 Flex 布局实现三栏布局"></a>使用 Flex 布局实现三栏布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flex布局三栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.middle</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之css（三）</title>
      <link href="/2024/06/12/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/06/12/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="Margin-设置为负数的理解"><a href="#Margin-设置为负数的理解" class="headerlink" title="Margin 设置为负数的理解"></a>Margin 设置为负数的理解</h3><p>在 CSS 布局中，<code>margin</code>属性用于创建元素周围的空间。当<code>margin</code>设置为负数时，它允许元素与其他元素重叠或超出其正常流的位置。以下是对于<code>margin</code>负值应用的理解：</p><p><img src="https://pic3.zhimg.com/v2-a7d813afe7ab2c6c4233146609d00dfa_r.jpg"></p><h4 id="margin上方负值"><a href="#margin上方负值" class="headerlink" title="margin上方负值"></a><code>margin</code>上方负值</h4><ul><li><strong>参考线</strong>：包含块(contenting block)内容区域的上边或上方相连元素<code>margin</code>的下边。</li><li><strong>效果</strong>：元素会向上移动，与参考线的距离减少。</li></ul><h4 id="margin左方负值"><a href="#margin左方负值" class="headerlink" title="margin左方负值"></a><code>margin</code>左方负值</h4><ul><li><strong>参考线</strong>：包含块(contenting block)内容区域的左边或左方相连元素<code>margin</code>的右边。</li><li><strong>效果</strong>：元素会向左移动，与参考线的距离减少。</li></ul><h4 id="margin下方负值"><a href="#margin下方负值" class="headerlink" title="margin下方负值"></a><code>margin</code>下方负值</h4><ul><li><strong>参考线</strong>：元素本身<code>border</code>的下边。</li><li><strong>效果</strong>：参考线向上移动，但元素位置保持不变。</li></ul><h4 id="margin右方负值"><a href="#margin右方负值" class="headerlink" title="margin右方负值"></a><code>margin</code>右方负值</h4><ul><li><strong>参考线</strong>：元素本身<code>border</code>的右边。</li><li><strong>效果</strong>：参考线向右移动，但元素位置保持不变。</li></ul><hr><h3 id="双飞翼布局与圣杯布局对比"><a href="#双飞翼布局与圣杯布局对比" class="headerlink" title="双飞翼布局与圣杯布局对比"></a>双飞翼布局与圣杯布局对比</h3><p><img src="https://www.wangbase.com/blogimg/asset/202008/bg2020080717.jpg"></p><h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><h5 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h5><ul><li>使用一个包含三栏的容器，并在中间栏中嵌套一个子容器。</li><li>通过负外边距(negative margin)将左栏和右栏分别移动到正确的位置。</li></ul><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>实现较为简单，逻辑清晰。</li><li>中间栏的内容首先加载，适合内容优先的布局需求。</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>需要额外的嵌套元素来控制布局，有时会增加 HTML 结构的复杂性。</li><li>负外边距可能会在某些情况下引发布局问题，特别是在处理响应式设计时。</li></ul><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><h5 id="实现方式：-1"><a href="#实现方式：-1" class="headerlink" title="实现方式："></a>实现方式：</h5><ul><li>使用一个包含三栏的容器，通过设置父容器的 padding 来给左右栏留出空间。</li><li>通过相对定位(relative positioning)调整左栏和右栏的位置，使其与中间栏并列。</li></ul><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li>不需要额外的嵌套元素，HTML 结构较为简洁。</li><li>父容器的 padding 和相对定位使得布局更加灵活，可以更好地适应不同的屏幕尺寸。</li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>实现相对复杂，需要精确控制父容器的 padding 和子容器的相对定位。</li><li>在某些浏览器下可能会出现兼容性问题，需要额外的 CSS 调整。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>双飞翼布局适合中间栏内容优先加载的需求，结构稍微复杂一些，使用负外边距实现布局。<br>圣杯布局结构简洁，通过父容器的 padding 和相对定位实现布局，适合需要更灵活布局调整的场景。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之css（二）</title>
      <link href="/2024/06/11/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/06/11/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是选择器，它们之间的优先级是什么样的？"><a href="#什么是选择器，它们之间的优先级是什么样的？" class="headerlink" title="什么是选择器，它们之间的优先级是什么样的？"></a>什么是选择器，它们之间的优先级是什么样的？</h3><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有 <code>&lt;p&gt;</code> 元素。</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.className</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有带有 <code>class=&quot;className&quot;</code> 的元素。</p><h4 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#idName</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择带有 <code>id=&quot;idName&quot;</code> 的元素。</p><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target=<span class="string">&quot;_blank&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有 target 属性值为 <code>_blank</code> 的 <code>&lt;a&gt;</code> 元素。</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有位于 <code>&lt;div&gt;</code> 元素内的 <code>&lt;p&gt;</code> 元素。</p><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有作为 <code>&lt;div&gt;</code> 元素直接子元素的 <code>&lt;p&gt;</code> 元素。</p><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择紧接在 <code>&lt;h1&gt;</code> 元素后的第一个 <code>&lt;p&gt;</code> 元素。</p><h4 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择所有位于 <code>&lt;h1&gt;</code> 元素之后的兄弟 <code>&lt;p&gt;</code> 元素。</p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: cyan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择用户鼠标悬停的 <code>&lt;a&gt;</code> 元素。</p><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Hello &quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择每个 <code>&lt;p&gt;</code> 元素的内容之前插入 “Hello “。</p><h4 id="CSS-选择器优先级"><a href="#CSS-选择器优先级" class="headerlink" title="CSS 选择器优先级"></a>CSS 选择器优先级</h4><p>CSS 选择器的优先级按照以下规则进行计算：</p><ul><li>内联样式 (Inline styles)，如：style&#x3D;”…”，权重为 1000。</li><li>ID 选择器，权重为 100。</li><li>类选择器、属性选择器和伪类选择器，权重为 10。</li><li>元素选择器和伪元素选择器，权重为 1。</li><li>通配符选择器（*），权重为 0。</li></ul><p>权重从高到低依次是：内联样式 &gt; ID 选择器 &gt; 类选择器&#x2F;属性选择器&#x2F;伪类选择器 &gt; 元素选择器&#x2F;伪元素选择器 &gt; 通配符选择器。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之css（一）</title>
      <link href="/2024/06/10/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/06/10/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bcss%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是回流和重绘？它们和-BFC-有什么关系？"><a href="#1-什么是回流和重绘？它们和-BFC-有什么关系？" class="headerlink" title="1. 什么是回流和重绘？它们和 BFC 有什么关系？"></a>1. 什么是回流和重绘？它们和 BFC 有什么关系？</h3><h4 id="回流（Reflow）"><a href="#回流（Reflow）" class="headerlink" title="回流（Reflow）"></a>回流（Reflow）</h4><p>回流是指当元素的尺寸、位置、或其他属性发生变化时，浏览器重新计算文档的布局（或几何结构）的过程。任何会影响元素几何属性的操作都会触发回流，例如：</p><ul><li>页面一开始渲染时</li><li>添加或删除 DOM 元素</li><li>改变元素的尺寸、边距、填充或边框</li><li>改变元素的内容</li><li>改变页面的样式（例如改变<code>display</code>、<code>position</code>、<code>float</code>等属性）</li><li>调整浏览器窗口大小</li></ul><p>回流是一个代价较高的操作，因为它不仅影响单个元素，还可能影响它的子元素、兄弟元素或父元素。因此，频繁的回流会对页面性能产生负面影响。</p><h4 id="重绘（Repaint）"><a href="#重绘（Repaint）" class="headerlink" title="重绘（Repaint）"></a>重绘（Repaint）</h4><p>重绘是指当元素的外观发生变化但不会影响布局时，浏览器重新绘制元素的过程。例如：</p><ul><li>改变元素的背景颜色、文字颜色</li><li>改变元素的阴影效果</li><li>改变元素的可见性（例如<code>visibility</code>属性）</li></ul><p>重绘的代价通常比回流要低，因为它只需要更新元素的外观，而不需要重新计算其布局。</p><h4 id="BFC-与回流的关系"><a href="#BFC-与回流的关系" class="headerlink" title="BFC 与回流的关系"></a>BFC 与回流的关系</h4><p>回流（Reflow）是指浏览器重新计算元素几何属性（位置和大小）并重新布局的过程。回流会影响页面性能，尤其是当回流影响到大量元素时。</p><p><strong>隔离性减少回流：</strong></p><p>BFC 通过其特性提供了一种布局隔离机制，使得 BFC 内部的布局变化不会影响 BFC 外部的布局。这样做有以下好处：</p><ul><li><p><strong>局部化布局变化</strong>：当一个 BFC 内部的元素发生变化（例如尺寸变化或位置变化）时，浏览器只需要重新计算这个 BFC 内部的布局，而不需要重新计算整个文档的布局。这大大减少了回流的范围和影响。</p><p>例如，如果一个元素的高度发生变化，而这个元素是一个 BFC 的子元素，则只有这个 BFC 内部的元素需要重新布局，而不是整个页面。</p></li><li><p><strong>降低回流频率</strong>：由于 BFC 隔离了内部和外部的布局变化，不同 BFC 之间的变化不会互相影响。这意味着，即使一个 BFC 内部频繁变化，也不会导致其他部分的频繁回流，从而减少整体的回流频率。</p></li></ul><h4 id="BFC-与重绘的关系"><a href="#BFC-与重绘的关系" class="headerlink" title="BFC 与重绘的关系"></a>BFC 与重绘的关系</h4><p>重绘（Repaint）是指当元素的外观（如颜色、背景等）发生变化时，浏览器重新绘制这些元素的过程。重绘的代价通常比回流低，但频繁的重绘也会影响性能。</p><p><strong>隔离性对重绘的影响：</strong></p><p>BFC 的隔离性主要影响回流，但间接也能减少重绘的开销。由于 BFC 内部的布局变化不会导致外部布局的变化，减少了需要重新绘制的区域，优化了渲染性能。</p><hr><h3 id="2-设备像素，CSS-像素，设备独立像素，DPR，PPI-之间的区别"><a href="#2-设备像素，CSS-像素，设备独立像素，DPR，PPI-之间的区别" class="headerlink" title="2. 设备像素，CSS 像素，设备独立像素，DPR，PPI 之间的区别"></a>2. 设备像素，CSS 像素，设备独立像素，DPR，PPI 之间的区别</h3><h4 id="设备像素（Device-Pixel）"><a href="#设备像素（Device-Pixel）" class="headerlink" title="设备像素（Device Pixel）"></a>设备像素（Device Pixel）</h4><p>设备像素是物理屏幕上的一个点，是显示器或移动设备屏幕的最小单位。设备像素的数量决定了屏幕的分辨率。</p><h4 id="CSS-像素（CSS-Pixel）"><a href="#CSS-像素（CSS-Pixel）" class="headerlink" title="CSS 像素（CSS Pixel）"></a>CSS 像素（CSS Pixel）</h4><p>CSS 像素是 Web 开发中使用的抽象单位，它与设备像素之间存在一定的关系，但并不直接映射到具体的物理像素上。浏览器会根据设备像素比（Device Pixel Ratio，简称 DPR）将 CSS 像素转换为实际的设备像素。</p><h4 id="设备独立像素（Device-Independent-Pixel-DIP）"><a href="#设备独立像素（Device-Independent-Pixel-DIP）" class="headerlink" title="设备独立像素（Device-Independent Pixel, DIP）"></a>设备独立像素（Device-Independent Pixel, DIP）</h4><p>设备独立像素是一个抽象的单位，用来在不同设备上保持一致的显示效果。在 CSS 中，1 个设备独立像素通常等于 1 个 CSS 像素。设备独立像素的概念有助于实现响应式设计和跨设备兼容性。</p><h4 id="设备像素比（Device-Pixel-Ratio-DPR）"><a href="#设备像素比（Device-Pixel-Ratio-DPR）" class="headerlink" title="设备像素比（Device Pixel Ratio, DPR）"></a>设备像素比（Device Pixel Ratio, DPR）</h4><p>设备像素比是指设备像素与设备独立像素的比值，表示一个 CSS 像素对应的设备像素数目。例如，如果一个设备的 DPR 为 2，那么 1 个 CSS 像素将对应 4 个设备像素（2x2）。</p><h4 id="像素密度（Pixels-Per-Inch-PPI）"><a href="#像素密度（Pixels-Per-Inch-PPI）" class="headerlink" title="像素密度（Pixels Per Inch, PPI）"></a>像素密度（Pixels Per Inch, PPI）</h4><p>像素密度是指每英寸（inch）的屏幕上的像素数量，通常用于描述屏幕的清晰度和显示质量。PPI 越高，屏幕显示的细节就越丰富。</p><hr><h3 id="3-什么是-CSS-选择器？"><a href="#3-什么是-CSS-选择器？" class="headerlink" title="3. 什么是 CSS 选择器？"></a>3. 什么是 CSS 选择器？</h3><h4 id="元素选择器（Type-Selector）"><a href="#元素选择器（Type-Selector）" class="headerlink" title="元素选择器（Type Selector）"></a>元素选择器（Type Selector）</h4><p>选择所有指定类型的元素。<br>示例：<code>p &#123; color: red; &#125;</code> 选择所有 <code>&lt;p&gt;</code> 元素。</p><h4 id="类选择器（Class-Selector）"><a href="#类选择器（Class-Selector）" class="headerlink" title="类选择器（Class Selector）"></a>类选择器（Class Selector）</h4><p>选择具有特定类名的元素。<br>示例：<code>.className &#123; color: blue; &#125;</code> 选择所有具有 <code>class=&quot;className&quot;</code> 的元素。</p><h4 id="ID-选择器（ID-Selector）"><a href="#ID-选择器（ID-Selector）" class="headerlink" title="ID 选择器（ID Selector）"></a>ID 选择器（ID Selector）</h4><p>选择具有特定 ID 的元素。<br>示例：<code>#idName &#123; color: green; &#125;</code> 选择具有 <code>id=&quot;idName&quot;</code> 的元素。</p><h4 id="属性选择器（Attribute-Selector）"><a href="#属性选择器（Attribute-Selector）" class="headerlink" title="属性选择器（Attribute Selector）"></a>属性选择器（Attribute Selector）</h4><p>选择具有特定属性的元素。<br>示例：<code>[type=&quot;text&quot;] &#123; border: 1px solid black; &#125;</code> 选择所有 <code>type=&quot;text&quot;</code> 的元素。</p><h4 id="伪类选择器（Pseudo-classes）"><a href="#伪类选择器（Pseudo-classes）" class="headerlink" title="伪类选择器（Pseudo-classes）"></a>伪类选择器（Pseudo-classes）</h4><p>选择处于特定状态的元素。<br>示例：<code>a:hover &#123; color: orange; &#125;</code> 选择鼠标悬停的 <code>&lt;a&gt;</code> 元素。</p><h4 id="伪元素选择器（Pseudo-elements）"><a href="#伪元素选择器（Pseudo-elements）" class="headerlink" title="伪元素选择器（Pseudo-elements）"></a>伪元素选择器（Pseudo-elements）</h4><p>选择元素的特定部分。<br>示例：<code>p::first-line &#123; font-weight: bold; &#125;</code> 选择所有 <code>&lt;p&gt;</code> 元素的第一行。</p><h4 id="组合选择器（Combinators）"><a href="#组合选择器（Combinators）" class="headerlink" title="组合选择器（Combinators）"></a>组合选择器（Combinators）</h4><p>组合多个选择器来选择元素。</p><p>示例：</p><ul><li>子选择器（Child Selector）：<code>ul &gt; li &#123; color: purple; &#125;</code></li><li>后代选择器（Descendant Selector）：<code>div p &#123; color: brown; &#125;</code></li><li>相邻兄弟选择器（Adjacent Sibling Selector）：<code>h1 + p &#123; margin-top: 0; &#125;</code></li><li>通用兄弟选择器（General Sibling Selector）：<code>h1 ~ p &#123; margin-top: 0; &#125;</code></li></ul><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>CSS 选择器的优先级由以下规则确定，从低到高：</p><ol><li>元素选择器和伪元素（如 <code>div</code>, <code>p</code>, <code>::before</code>, <code>::after</code>）</li><li>类选择器、属性选择器和伪类（如 <code>.class</code>, <code>[type=&quot;text&quot;]</code>, <code>:hover</code>）</li><li>ID 选择器（如 <code>#id</code>）</li><li>内联样式（直接在元素上使用 <code>style</code> 属性）</li><li>重要性（<code>!important</code>）：可以打破上述所有规则，具有最高优先级。</li></ol><p>优先级依次为：内联样式 &gt; ID 选择器 &gt; 类选择器、属性选择器、伪类选择器 &gt; 元素选择器、伪元素选择器。!important 具有最高优先级，可以覆盖其他所有样式声明。</p><h4 id="优先级冲突的解决"><a href="#优先级冲突的解决" class="headerlink" title="优先级冲突的解决"></a>优先级冲突的解决</h4><p>当多个选择器匹配同一个元素并且具有相同的优先级时，后定义的样式将覆盖前面定义的样式。这是因为 CSS 遵循“层叠”规则，后面的样式会覆盖前面的样式。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git之获取远程分支（fetch5种方法）</title>
      <link href="/2024/05/20/git%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%EF%BC%88fetch5%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/2024/05/20/git%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%EF%BC%88fetch5%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-分支切换方法"><a href="#Git-分支切换方法" class="headerlink" title="Git 分支切换方法"></a>Git 分支切换方法</h1><h2 id="方法一：git-checkout-targetbranch"><a href="#方法一：git-checkout-targetbranch" class="headerlink" title="方法一：git checkout targetbranch"></a>方法一：<code>git checkout targetbranch</code></h2><ol><li>首先，获取远程所有分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li>查看所有远程分支，找到需要的远程分支，例如 <code>origin/targetbranch</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li><li>在本地新建一个同名分支，然后系统会自动与该远程分支关联<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout targetbranch</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>git checkout origin/mybranch</code> 会进入 detached head 状态，不会在本地新建分支，不要这样写。</p></blockquote></li></ol><h2 id="方法二：git-checkout-b-本地分支名-origin-远程分支名"><a href="#方法二：git-checkout-b-本地分支名-origin-远程分支名" class="headerlink" title="方法二：git checkout -b 本地分支名 origin/远程分支名"></a>方法二：<code>git checkout -b 本地分支名 origin/远程分支名</code></h2><ol><li>首先，获取远程所有分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li>创建与远程分支关联的本地分支（可以同名，也可以不同名；建议同名，方便管理）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名 origin/远程分支名</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法三：git-checkout-track-origin-远程分支名"><a href="#方法三：git-checkout-track-origin-远程分支名" class="headerlink" title="方法三：git checkout --track origin/远程分支名"></a>方法三：<code>git checkout --track origin/远程分支名</code></h2><ol><li>首先，获取远程所有分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li>创建与远程分支关联的本地分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track origin/远程分支名</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法四：git-checkout-t-origin-远程分支名"><a href="#方法四：git-checkout-t-origin-远程分支名" class="headerlink" title="方法四：git checkout -t origin/远程分支名"></a>方法四：<code>git checkout -t origin/远程分支名</code></h2><ol><li>首先，获取远程所有分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li>创建与远程分支关联的本地分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -t origin/远程分支名</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法五：fetch-指定的一个分支：git-fetch-repo-remote-branch-name-local-branch-name"><a href="#方法五：fetch-指定的一个分支：git-fetch-repo-remote-branch-name-local-branch-name" class="headerlink" title="方法五：fetch 指定的一个分支：git fetch [repo] [remote_branch_name]:[local_branch_name]"></a>方法五：fetch 指定的一个分支：<code>git fetch [repo] [remote_branch_name]:[local_branch_name]</code></h2><ol><li><p>获取远程指定分支，并创建与之关联的本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [repo] [remote_branch_name]:[local_branch_name]</span><br></pre></td></tr></table></figure><blockquote><p>举例：<code>git fetch origin TargetBranch:tempBranch</code> 从远程仓 origin 的 TargetBranch 分支下载到本地，并新建一个 tempBranch 分支。</p><p><code>[remote_branch_name]:[local_branch_name]</code> 可同名，也可不同名；建议同名，便于管理。</p></blockquote></li><li><p>切换当前分支为本地建立的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [local_branch_name]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是css变量？</title>
      <link href="/2024/05/03/%E4%BB%80%E4%B9%88%E6%98%AFcss%E5%8F%98%E9%87%8F%EF%BC%9F/"/>
      <url>/2024/05/03/%E4%BB%80%E4%B9%88%E6%98%AFcss%E5%8F%98%E9%87%8F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-变量详解"><a href="#CSS-变量详解" class="headerlink" title="CSS 变量详解"></a>CSS 变量详解</h1><h2 id="什么是-CSS-变量？"><a href="#什么是-CSS-变量？" class="headerlink" title="什么是 CSS 变量？"></a>什么是 CSS 变量？</h2><p>CSS 变量（也被称为“自定义属性”）是在 CSS 中存储特定值以便重用的一种方法。这些变量在 CSS 代码中以两个连字符（<code>--</code>）开头，可以在文档的任何地方使用，从而提高了代码的灵活性和可维护性。</p><h2 id="CSS-变量解决了什么问题？"><a href="#CSS-变量解决了什么问题？" class="headerlink" title="CSS 变量解决了什么问题？"></a>CSS 变量解决了什么问题？</h2><p>CSS 变量主要解决了以下几个问题：</p><ol><li><strong>重复性</strong>: 在传统 CSS 中，相同的值（如颜色、字体大小等）需要在多处重复定义。CSS 变量允许你在一个地方定义这些值，然后在整个样式表中重复使用这个变量。</li><li><strong>可维护性</strong>: 更新样式时，只需改变一个地方的变量值，整个网站的相关样式都会自动更新，简化了维护工作。</li><li><strong>动态性</strong>: CSS 变量可以通过 JavaScript 动态更新，这使得实现主题切换或响应式设计等功能变得更加简单。</li></ol><h2 id="为什么要使用-CSS-变量？"><a href="#为什么要使用-CSS-变量？" class="headerlink" title="为什么要使用 CSS 变量？"></a>为什么要使用 CSS 变量？</h2><p>使用 CSS 变量的理由包括：</p><ul><li><strong>灵活性</strong>: 可以在任何 CSS 属性中使用 CSS 变量。</li><li><strong>全局与局部作用域</strong>: 可以将变量定义在<code>:root</code>（全局）或任何特定选择器（局部）中。</li><li><strong>与 JavaScript 的交互</strong>: 可以很容易地通过 JavaScript 读取或修改变量的值，使得网站可以实现更多动态和交互性强的功能。</li></ul><h2 id="使用-CSS-变量的好处"><a href="#使用-CSS-变量的好处" class="headerlink" title="使用 CSS 变量的好处"></a>使用 CSS 变量的好处</h2><ul><li><strong>一致性</strong>: 维持设计的一致性更加容易，因为所有使用变量的地方都引用同一个值。</li><li><strong>灵活调整</strong>: 调整主题或进行样式调整更为便捷，只需要修改少数几个变量值。</li><li><strong>代码简洁</strong>: 减少了代码的重复，使得 CSS 文件更加整洁和易于管理。</li></ul><h2 id="CSS-变量在定制样式时的竞品"><a href="#CSS-变量在定制样式时的竞品" class="headerlink" title="CSS 变量在定制样式时的竞品"></a>CSS 变量在定制样式时的竞品</h2><p>CSS 变量的主要竞品可以从以下几个方面来看：</p><ol><li><strong>预处理器变量（如 Sass, Less）</strong>: 这些工具也提供变量功能，但它们在编译时处理变量，不支持运行时的动态更改。</li><li><strong>JavaScript 样式操作</strong>: 直接通过 JavaScript 操作样式，虽然灵活，但通常会比使用 CSS 变量更复杂，且可能影响性能。</li><li><strong>内联样式</strong>: 直接在 HTML 元素上定义样式，提供最高优先级的控制，但不利于样式的复用和维护。</li></ol><h2 id="CSS-变量的不足之处"><a href="#CSS-变量的不足之处" class="headerlink" title="CSS 变量的不足之处"></a>CSS 变量的不足之处</h2><ol><li><strong>浏览器兼容性</strong>: 虽然大多数现代浏览器都支持 CSS 变量，但在一些旧的浏览器（如 Internet Explorer）中不被支持。</li><li><strong>性能考虑</strong>: 在一些极端情况下，频繁地改变 CSS 变量的值可能会引起性能问题。</li><li><strong>复杂性</strong>: 对于初学者或者不熟悉 CSS 工作方式的开发者来说，理解和正确使用 CSS 变量可能会有一定的学习曲线。</li><li><strong>调试难度</strong>: 调试样式问题可能比直接使用具体值更加复杂，因为需要追踪变量的定义和使用情况。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅度对比 Shadcn 与 Ant Design</title>
      <link href="/2024/04/30/%E6%B5%85%E5%BA%A6%E5%AF%B9%E6%AF%94%20Shadcn%20%E4%B8%8E%20Ant%20Design/"/>
      <url>/2024/04/30/%E6%B5%85%E5%BA%A6%E5%AF%B9%E6%AF%94%20Shadcn%20%E4%B8%8E%20Ant%20Design/</url>
      
        <content type="html"><![CDATA[<h3 id="Shadcn-与-Antd-是什么？"><a href="#Shadcn-与-Antd-是什么？" class="headerlink" title="Shadcn 与 Antd 是什么？"></a>Shadcn 与 Antd 是什么？</h3><p><strong>Shadcn UI</strong></p><ul><li><strong>概述</strong>: Shadcn UI 是一个包含可重用 UI 组件的集合，这些组件可以直接复制粘贴到你的应用中，不需要通过 npm 包管理系统进行安装。</li></ul><blockquote><p>如何理解可重用性？<br>在软件开发中，可重用性指的是某个组件或代码块能够在多个项目或应用程序中使用，而无需进行大量修改。对于 Shadcn UI 提到的可重用 UI 组件，这意味着这些组件被设计为通用性强，易于集成，可以在不同的项目中反复使用。</p></blockquote><ul><li><strong>解决的问题</strong>: 提供快速且灵活的方法实现自定义 UI 组件，减少开发时间并增加项目的个性化。</li></ul><p><strong>Ant Design</strong></p><ul><li><strong>概述</strong>: Ant Design 是基于 React 的企业级 UI 设计语言和组件库，提供一整套设计工具和组件，以增强应用的界面一致性和用户体验。</li><li><strong>解决的问题</strong>: 通过一套成熟的组件库和设计规范，提高开发效率，确保产品设计的一致性。</li></ul><hr><h3 id="为什么选择-Shadcn-UI"><a href="#为什么选择-Shadcn-UI" class="headerlink" title="为什么选择 Shadcn UI"></a>为什么选择 Shadcn UI</h3><ul><li>提供极大的灵活性和简易的集成方式，特别适合需要快速部署和具有特定设计需求的小型项目。</li><li>Ant Design 虽然功能全面，但其规范性不适合需要高度定制的场景。<blockquote><p>如何理解规范性？<br>1 设计语言和风格统一：Ant Design 提供了一套完整的设计语言，包括颜色、字体、布局等视觉风格的详细规范。这种统一的设计语言帮助保持应用界面的一致性，减少用户的学习成本。<br>2 组件标准化：Ant Design 的组件库中的每个组件都遵循严格的接口和交互标准。例如，按钮、输入框、表格等组件都有明确的样式和行为规范，确保在不同的项目中都能保持一致的表现。</p></blockquote></li></ul><h3 id="为什么选择-Ant-Design"><a href="#为什么选择-Ant-Design" class="headerlink" title="为什么选择 Ant Design"></a>为什么选择 Ant Design</h3><ul><li>原因：为大型项目提供稳定支持，具备丰富的组件和实用的设计规范，有助于提高团队协作效率和项目的可维护性。</li><li>虽然 Shadcn UI 更为灵活，但在大规模或需要维护长期一致性的项目中，每次手动集成组件可能会降低效率或提高风险。</li></ul><hr><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p><strong>选择 Shadcn UI 的场景</strong>：</p><ul><li>创业公司、个人项目或需要特定定制的开发环境。</li><li>ROI：初期成本低，但可能需要在项目扩展时考虑额外的维护成本。</li></ul><p><strong>选择 Ant Design 的场景</strong>：</p><ul><li>大型企业、需要高度一致性和可扩展性的复杂应用，如企业级后台管理系统。</li><li>ROI：虽然初期投入（如培训和集成）较大，长期来看可以节省维护成本，提高工作效率，具有较高的投资回报率。</li></ul><h3 id="Shadcn-的使用体验"><a href="#Shadcn-的使用体验" class="headerlink" title="Shadcn 的使用体验"></a>Shadcn 的使用体验</h3><p>官网中主题选项中可以通过若干选项 快速实现一套自定义 ui 的功能着实让人眼前一亮<br><img src="https://i2.mjj.rip/2024/04/30/7dd2281670021ed625a312e96a85984d.jpeg" alt="主题选择"><br>在初次使用某个组件时再单独 cli 也确实繁琐 不如隔壁 antd 的仅需安装到库就能畅享所有组件<br><img src="https://i2.mjj.rip/2024/04/30/6cd026b9f0f3e229425c0789e4a32bc2.jpeg" alt="安装"></p><h3 id="社区对比"><a href="#社区对比" class="headerlink" title="社区对比"></a>社区对比</h3><table><thead><tr><th></th><th>Stars</th><th>Forks</th><th>Used By</th><th>Contributors</th></tr></thead><tbody><tr><td>Antd</td><td>90.3k</td><td>46k</td><td>578k</td><td>2111</td></tr><tr><td>Shadcn</td><td>57.4k</td><td>3.1k</td><td>4.2k</td><td>190</td></tr></tbody></table><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>二者的选择本质上就是灵活性和规范性的取舍问题<br>选择 Shadcn UI 还是 Ant Design 取决于具体项目需求、预算、团队结构和项目规模。对于快速发展和需要个性化设计的小项目，Shadcn UI 可能是一个更合适的选择。对于需要长期稳定和高效协作的大型企业项目，Ant Design 提供了强大的支持和高效的开发流程。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadcn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规范的 git commit</title>
      <link href="/2024/04/29/%E8%A7%84%E8%8C%83%E7%9A%84%20git%20commit/"/>
      <url>/2024/04/29/%E8%A7%84%E8%8C%83%E7%9A%84%20git%20commit/</url>
      
        <content type="html"><![CDATA[<h2 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h2><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p><h3 id="Type（必须）"><a href="#Type（必须）" class="headerlink" title="Type（必须）"></a>Type（必须）</h3><p>Type 用于说明 git commit 的类别，只允许使用以下标识：</p><ul><li><strong>feat</strong>：新增功能（feature）。</li><li><strong>fix&#x2F;to</strong>：修复 bug。<ul><li><strong>fix</strong>：产生 diff 并自动修复此问题。适合于一次提交直接修复问题。</li><li><strong>to</strong>：只产生 diff 不自动修复此问题。适合于多次提交。最终修复问题提交时使用 fix。</li></ul></li><li><strong>docs</strong>：文档（documentation）。</li><li><strong>style</strong>：格式（不影响代码运行的变动）。</li><li><strong>refactor</strong>：重构（即不是新增功能，也不是修改 bug 的代码变动）。</li><li><strong>perf</strong>：优化相关，比如提升性能、体验。</li><li><strong>test</strong>：增加测试。</li><li><strong>chore</strong>：构建过程或辅助工具的变动。</li><li><strong>revert</strong>：回滚到上一个版本。</li><li><strong>merge</strong>：代码合并。</li><li><strong>sync</strong>：同步主线或分支的 Bug。</li></ul><h3 id="Scope（可选）"><a href="#Scope（可选）" class="headerlink" title="Scope（可选）"></a>Scope（可选）</h3><p>Scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。例如在 Angular，可以是<code>location</code>、<code>browser</code>、<code>compile</code>、<code>rootScope</code>、<code>ngHref</code>、<code>ngClick</code>、<code>ngView</code>等。如果你的修改影响了不止一个 scope，你可以使用<code>*</code>代替。</p><h3 id="Subject（必须）"><a href="#Subject（必须）" class="headerlink" title="Subject（必须）"></a>Subject（必须）</h3><p>Subject 是 commit 目的的简短描述，不超过 50 个字符。</p><ul><li>建议使用中文，以便更清晰地描述问题。</li><li>结尾不加句号或其他标点符号。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fix(DAO):用户查询缺少username属性</span><br><span class="line">feat(Controller):用户查询接口开发</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五天速成electron——day0</title>
      <link href="/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/"/>
      <url>/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/</url>
      
        <content type="html"><![CDATA[<h3 id="Electron-的由来"><a href="#Electron-的由来" class="headerlink" title="Electron 的由来"></a>Electron 的由来</h3><p>如果想开发一个桌面 GUI 应用软件，希望其能同时在 Windows、Linux 和 Mac 平台上运行，可选的技术框架并不多，在早期人们主要用 <a href="https://www.wxwidgets.org/">wxWidgets</a>、<a href="https://www.gtk.org/">GTK</a> 或 <a href="https://www.gtk.org/">Qt</a> 来做这类工作。</p><p>这类框架大都是以 C&#x2F;C++语言开发，受语言开发效率的限制，开发者想通过它们快速的完成桌面应用的开发工作十分困难。近几年相继出现了现代编程语言针对这些框架的绑定库，诸如 Python、C#、Go 等，大部分都是开源社区提供的，但由于历史原因，要想用到这些框架的全部特性，还是需要编写 C&#x2F;C++代码。并且高质量的 Node.js 的绑定库几乎没有，前端程序员想通过这类框架开发桌面应用更是难上加难。</p><p>Stack Overflow 的联合创始人 Jeff Atwood 曾经说过，<strong>凡能用 JavaScript 实现的，注定会被用 JavaScript 实现</strong>。桌面 GUI 应用也不例外，近几年两个重量级框架 NW.js 和 Electron 横空出世，给前端开发人员打开了这个领域的大门。</p><blockquote><p>这两个框架都与中国人有极深的渊源，2011 年左右，中国英特尔开源技术中心的王文睿（Roger Wang）希望能用 Node.js 来操作 WebKit，而创建了 node-webkit 项目，这就是 NW.js 的前身。英特尔公司大力支持了这个项目，不但允许王文睿分出一部分精力来做这个开源项目，还给了他招聘名额，允许他招聘其他工程师来一起完成这个项目。<br>2012 年，故事的另一个主角赵成（Cheng Zhao）加入到王文睿的小组，并对 node-webkit 项目做出了大量的改进。后来赵成离开了英特尔，帮助 github 团队尝试把 node-webkit 应用到 Atom 编辑器上，但由于当时 node-webkit 还并不稳定，且 node-webkit 项目的走向也不再受赵成的控制了，这个尝试最终以失败告终。<br>但赵成和 github 团队并没有放弃，而是着手开发另一个类似 node-webkit 的项目：Atom Shell，这个项目就是 Electron 的前身，赵成在这个项目上倾注了大量的心血，这也是这个项目后来广受欢迎的关键因素之一，再后来 github 把这个项目开源出来，最终更名为 Electron。</p></blockquote><h3 id="Electron-的价值"><a href="#Electron-的价值" class="headerlink" title="Electron 的价值"></a>Electron 的价值</h3><p><strong>Electron 和 NW.js 框架都是基于 Chromium 和 Node.js 实现的</strong>，这就使得前端程序员可以使用 JavaScript、HTML 和 CSS 知识轻松构建跨平台的桌面应用。</p><p>传统桌面应用开发的难点，现在看来也变得异常容易，比如绘制漂亮的界面可以使用更灵活的 HTML 和 CSS 提供的能力、实现简单的动效可以用 CSS Animations 或 Web Animations API 来实现。</p><p>为了弥补 Node.js 和前端技术访问系统 API 方面的不足，这两个框架内部都对系统 API 做了封装，比如：系统对话框、系统托盘、系统菜单、剪切板等。开发者基于 Electron 开发应用时，可以直接使用 JavaScript 访问这些 API。其他诸如网络访问控制、本地文件系统的访问控制则由 Node.js 提供支持。这样开发者就可以使用前端技术开发绝大多数桌面应用的需求了。</p><p>前端技术是现如今软件开发领域应用最广泛的技术之一。入门门槛非常低、周边生态繁荣而且历史悠久。相对于基于 C++库开发桌面软件来说，<strong>基于 Electron 开发更容易上手且开发效率更高</strong>。由于 JavaScript 语言是一门解释执行的语言，所以 C++语言固有的各种问题都不再是问题，比如：C++没有垃圾回收机制，开发人员要小心翼翼的控制内存，以免造成内存泄露。C++语言特性繁多且复杂，学习难度曲线陡峭，需要针对不同平台进行编译，应用分发困难等，使用 Electron 开发桌面应用就不用担心这些问题。</p><p>执行效率上，如果前端代码写的足够优秀，完全可以做到与 C++应用相媲美的用户体验，Visual Studio Code 就是先例。另外 Node.js 本身也可以很方便的调用 C++扩展，Electron 应用内又包含 Node.js 环境，对于一些音视频编解码或图形图像处理需求，可以使用 Node.js 的 C++扩展来完成。</p><p>随着几十年 Web 应用大行其道，Web 前端开发领域的技术生态足够繁荣。<strong>Electron 可以使用几乎所有的 Web 前端生态领域及 Node.js 生态领域的组件和技术方案</strong>。目前发布到 <a href="http://npmjs.com/">http://npmjs.com</a> 平台上的模块已经超过 90 万个，覆盖领域广、优秀模块繁多且使用非常简单方便。</p><p>在完成 Web 前端开发工作时，开发者需要考虑很多浏览器兼容的问题，比如：用户是否使用了低版本的 IE 浏览器，是否可以在样式表内使用 flexbox 弹性盒模型等问题。最终会导致前端开发者束手束脚，写一些丑陋的兼容代码以保证自己的工作能在所有终端表现正常。但由于 Electron 内置了 Chromium 浏览器，该浏览器对标准支持非常好，甚至有些标准尚未通过，Chromium 浏览器就已经支持了，所以基于 Electron 开发应用不会遇到这些问题。开发者的自由度得到了最大程度的保护，你几乎可以在 Electron 中使用所有 HTML5、CSS3 、ES6 标准中定义的 API。</p><h3 id="Electron-的原理"><a href="#Electron-的原理" class="headerlink" title="Electron 的原理"></a>Electron 的原理</h3><p>Electron 是一个集成项目，它做了如下几个重要的工作：</p><p>订制 Chromium，并把订制版本的 Chromium 集成在 Electron 内部<br>订制 Node.js，并把订制版本的 Node.js 集成在 Electron 内部<br>通过消息轮训机制打通 Node.js 和 Chromium 的消息循环<br>通过 Electron 的内置模块向开发者提供桌面应用开发必备的 API<br>Electron 框架的内部原理图如下所示：</p><p><img src="https://pic3.zhimg.com/80/v2-ab797e031daf85536c325c94f1f95062_1440w.webp"></p><p>其中 Chromium 基础能力 API 可以让应用渲染开发者提供的 HTML 页面，让应用可以在 Cookie 或 IndexedDB 中存取数据，前端开发者都非常熟悉这些能力。</p><p>Node.js 基础能力 API 可以让开发者读写本地磁盘的文件、通过 socket 访问网络、创建和控制子进程等，Node.js 开发者非常熟悉这些能力。</p><p>Electron 内置模块可以让开发者创建操作系统的托盘图标、访问操作系统的剪切板、发送系统通知，同时它还提供了一系列的 API，允许开发者使用 JavaScript 访问 Chromium 的底层能力。</p><p>下面我们来看一下 Electron 应用的结构：</p><p><img src="https://pic4.zhimg.com/80/v2-fdd8f4e340d6c10754cee5985ec9e6a7_1440w.webp"></p><p><strong>每个 Electron 都是由 1 个主进程、 1 个或多个渲染进程组成的</strong>，开发者的主要工作就是完成主进程的逻辑和渲染进程的逻辑。</p><p>Electron 应用启动时，首先会加载主进程的逻辑，主进程会创建一个或多个窗口，我们暂时可以粗浅的认为一个窗口就代表一个渲染进程，主进程负责管理所有的渲染进程。</p><p>窗口内加载的页面就是开发者要实现的渲染进程的逻辑，我们可以让渲染进程与主进程通信，他们之间是通过 IPC 消息管道进行通信的。虽然有一些特殊的手段让两个渲染进程直接通信（后面的章节我们会介绍），但大部分时候还是通过主进程来中转消息以达到渲染进程间通信的目的。</p><p>Electron 提供的一系列内置模块大部分是专门为主进程的逻辑服务的，比如 app 模块、BrowserWindow 模块和 session 模块等，少量模块是专门为渲染进程的逻辑服务的，比如 ipcRenderer 模块、webFrame 模块等，只有少量模块是两个进程可以同时使用的，比如：clipboard 模块、desktopCapturer 模块等。我们应该清楚这些模块的势力范围，不能在主进程中使用渲染进程的模块，反之也不行。</p><h3 id="Electron-的不足"><a href="#Electron-的不足" class="headerlink" title="Electron 的不足"></a>Electron 的不足</h3><p>基于 Electron 开发桌面 GUI 应用并不是完美的方案，它也有它的不足，综合起来说有以下几点：</p><p>第一：打包后的应用体积巨大</p><p>一个功能不算多的桌面应用，通过 electron-builder 压缩打包后至少要 50M。而且如果开发者不做额外的 Hack 工作的话，用户每次升级应用程序，还要让用户再下载一次同样体积的安装包。这对于应用分发来说是一个不小的负担。但随着网络环境越来越好，用户磁盘的容积越来越大，此问题给用户带来的损失会慢慢被削弱。</p><p>第二：版本发布过快</p><p>为了跟进 Chromium (和 Node.js) 的版本发布节奏，Electron 也有非常频繁的版本发布机制，每次 Chromium 的改动，都可能导致 Electron 冒出很多新的问题，甚至稳定版本都有很多未解决的问题。好在关键核心功能一直以来都是稳定的。</p><p>第三：安全性问题</p><p>Electron 把一些有安全隐患的模块和 API 都设置为默认不可用的状态，但这些模块和 API 都是非常常用的，有的时候开发者不得不打开这些开关，一旦处理不当，就可能导致他们开发的应用存在安全隐患，给开发者乃至终端用户带来伤害。安全问题有很多值得关注的技术细节，以至于 Electron 官方文档中专门开辟出来一个章节号召程序员重视安全问题。</p><p>第五：资源消耗较大</p><p>Electron 底层基于 Chromium 浏览器，资源占用较多一直以来都是 Chromium 被人诟病的问题，目前来看这个问题还没有很好的解决办法，只能依赖 Chromium 团队对 Chromium 的优化工作了。</p><p>第六：性能问题</p><p>Electron 本身是多进程多线程的框架，但 JavaScript 是单线程运行的，如果产品的需求中有大量音视频编解码、复杂数据格式化这类 CPU 消耗性的需求，那么不应该在 Electron 内使用 JavaScript 来实现这些需求，而应该使用 Node.js 的原生模块来实现这些需求。与其说这是一个 Electron 的不足，不如说这是 JavaScript 的不足。</p><p>除了以上这些问题外，Electron 还不支持老版本的 Windows 操作系统，比如 Windows XP，在中国还有一些用户是使用 Windows XP 的，开发者如果需要面向这些用户，应该考虑使用其他技术方案了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>import后面加上{}和不加{}有什么区别</title>
      <link href="/2024/04/23/import%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/04/23/import%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>ES6 使用 import 引入定义的模块，我自己总结的 default 和花括号的问题：export default，不能用花括号；export 但是没有 default，用花括号。</p><p>ES6 中 export 及 export default 的区别</p><p>在 JavaScript ES6 中，export 与 export default 均可用于导出常量、函数、文件、模块等，你可以在其它文件或模块中通过 import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用，但在一个文件或模块中，export、import 可以有多个，export default 仅有一个。</p><p>1.export 与 export default 均可用于导出常量、函数、文件、模块等</p><p>2.在一个文件或模块中，export 、import 可以有多个，export default 仅有一个</p><p>3.通过 export 方式导出，在导入时要加{ }，export default 则不需要</p><p>4.export 能直接导出变量表达式，export default 不行</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DNS地址列表和DNS设置教程</title>
      <link href="/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/"/>
      <url>/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一些国内常用-DNS-列表"><a href="#一些国内常用-DNS-列表" class="headerlink" title="一些国内常用 DNS 列表"></a>一些国内常用 DNS 列表</h2><h3 id="1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"><a href="#1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。" class="headerlink" title="1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"></a>1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。</h3><p>DNS 服务器 IP 地址：<br>首选：114.114.114.114<br>备选：114.114.114.115</p><h3 id="2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。"><a href="#2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。" class="headerlink" title="2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。"></a>2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：223.5.5.5<br>备选：223.6.6.6</p><h3 id="3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。"><a href="#3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。" class="headerlink" title="3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。"></a>3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。</h3><p>已被污染，强烈不推荐！<br>DNS 服务器 IP 地址：<br>首选：8.8.8.8<br>备选：8.8.4.4</p><h3 id="4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"><a href="#4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。" class="headerlink" title="4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"></a>4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：208.67.222.222<br>备选：208.67.220.220</p><h3 id="5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。"><a href="#5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。" class="headerlink" title="5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。"></a>5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。</h3><p>DNS 服务器 IP 地址：<br>首选：180.76.76.76<br>备用：无</p><h3 id="6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"><a href="#6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。" class="headerlink" title="6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"></a>6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：1.2.4.8<br>备选：202.98.0.6</p><h3 id="7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"><a href="#7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！" class="headerlink" title="7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"></a>7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！</h3><p>DNS 服务器 IP 地址：<br>首选：119.29.29.29<br>备选：182.254.116.116</p><h2 id="DNS-设置教程（以-WIN10-系统为例）"><a href="#DNS-设置教程（以-WIN10-系统为例）" class="headerlink" title="DNS 设置教程（以 WIN10 系统为例）"></a>DNS 设置教程（以 WIN10 系统为例）</h2><p>第一步：点击桌面右下角，”网络“图标，打开”打开网络和 internet 设置“，</p><p>第二步：选择”以太网“— 点击”更改适配器选项“—找到”本地网络“也就是”以太网“，右键打开，点击”属性“—找到”IPv4“协议，双击打开—点击”使用下面的 DNS 服务器地址“，设置相应的 DNS—点击，确认，设置完成。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑常见故障修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
